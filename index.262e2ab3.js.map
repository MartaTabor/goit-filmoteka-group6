{"mappings":"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","sources":["<anon>","src/index.js","src/js/fetchFilms.js","src/js/popularFilms.js","src/js/to-top.js"],"sourcesContent":["\nfunction $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\n\n      var $parcel$global = globalThis;\n    \nvar $parcel$modules = {};\nvar $parcel$inits = {};\n\nvar parcelRequire = $parcel$global[\"parcelRequired7c6\"];\n\nif (parcelRequire == null) {\n  parcelRequire = function(id) {\n    if (id in $parcel$modules) {\n      return $parcel$modules[id].exports;\n    }\n    if (id in $parcel$inits) {\n      var init = $parcel$inits[id];\n      delete $parcel$inits[id];\n      var module = {id: id, exports: {}};\n      $parcel$modules[id] = module;\n      init.call(module.exports, module, module.exports);\n      return module.exports;\n    }\n    var err = new Error(\"Cannot find module '\" + id + \"'\");\n    err.code = 'MODULE_NOT_FOUND';\n    throw err;\n  };\n\n  parcelRequire.register = function register(id, init) {\n    $parcel$inits[id] = init;\n  };\n\n  $parcel$global[\"parcelRequired7c6\"] = parcelRequire;\n}\n\nvar parcelRegister = parcelRequire.register;\n\n// axios\n\nvar $hGVxz = parcelRequire(\"hGVxz\");\n\nvar $lzX4I = parcelRequire(\"lzX4I\");\n// // projekt fetch api movie\n// const API_KEY = 'AIzaSyDrsw02tJfVOg5942KrmMQDgPqT2tORfaM';\n// const BASE_URL = 'https://api.themoviedb.org/3';\n// \n// // searchBtm = document\n// const options = {\n//   method: 'GET',\n//   url: 'https://api.themoviedb.org/3/search/movie',\n//   params: {\n//     include_adult: 'false',\n//     language: 'en-US',\n//     page: '1',\n//   },\n//   headers: { accept: 'application/json' },\n// };\n// // axios\n// //   .request(options)\n// //   .then(function (response) {\n// //     console.log(response.data);\n// //   })\n// //   .catch(function (error) {\n// //     console.error(error);\n// //   });\n// // zapytanie o popularne filmy\n// export async function getTrendingMovies() {\n//   const searchParams = {\n//     params: {\n//       page: this.page,\n//       api_key: API_KEY,\n//     },\n//   };\n//   return axios.get(`${BASE_URL}trending/movie/week`, searchParams);\n// }\n// // try {\n// //   const resp = await fetch(\n// //     `${BASE_URL}/trending/all/day?api_key=${API_KEY}&language=en-US&page=${page}`,\n// //   );\n// //   if (!resp.ok) throw new Error(resp.status);\n// //   return await resp.json();\n// // } catch (err) {\n// //   console.error(err.message);\n// // }\n// // zapytanie o gatunki\n// export async function getGenres() {\n//   const searchParams = {\n//     params: {\n//       page: this.page,\n//       api_key: API_KEY,\n//     },\n//   };\n//   return axios.get(`${BASE_URL}genre/movie/list`, searchParams);\n// }\n// // try {\n// //   const response = await fetch(`${BASE_URL}/genre/movie/list?api_key=${API_KEY}&language=en-US`);\n// //   const respGenres = await response.json();\n// //   return respGenres;\n// // } catch (error) {\n// //   console.log(error.message);\n// // }\n// // zapytanie po id\n// export async function fetchTrailer(id) {\n//   try {\n//     const responce = await fetch(\n//       `${BASE_URL}/movie/${id}/videos?api_key =${API_KEY}`,\n//     );\n//     const data = await responce.json();\n//     return data;\n//   } catch (error) {\n//     console.log(error.message);\n//   }\n// }\nconst $9a7554dd658d5eed$var$searchForm = document.querySelector(\"#search-form\");\nasync function $9a7554dd658d5eed$export$9032d802dd688362() {\n    const options = {\n        method: \"GET\",\n        url: \"https://api.themoviedb.org/3/search/movie\",\n        params: {\n            query: `${$9a7554dd658d5eed$var$searchForm.elements.searchQuery.value.trim().split(\" \").join(`%20`)}`,\n            include_adult: \"false\",\n            language: \"en-US\",\n            page: \"1\"\n        },\n        headers: {\n            accept: \"application/json\",\n            Authorization: \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwNjRiYzVmYTA0ZTcwZWUwNmI1YmZjZmZkZDAwMjhmZiIsInN1YiI6IjY1ZjFiYzIwZDY0YWMyMDBjYTVkMWU2YSIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.kSA66Srxuh9huCM-91QWv-1PAFYBxqjt-fFzzJb4bmg\"\n        }\n    };\n    (0, $hGVxz.default).request(options).then(function(response) {\n        console.log(response.data);\n    }).catch(function(error) {\n        console.error(error);\n    });\n}\n$9a7554dd658d5eed$var$searchForm.addEventListener(\"submit\", (evt)=>{\n    evt.preventDefault();\n    if ($9a7554dd658d5eed$var$searchForm.elements.searchQuery.value.trim() == \"\") (0, (/*@__PURE__*/$parcel$interopDefault($lzX4I))).Notify.warning(\"Enter some text...\");\n    else $9a7554dd658d5eed$export$9032d802dd688362();\n});\n\n\nparcelRequire(\"kBG4Y\");\nparcelRequire(\"4boOf\");\nparcelRequire(\"40lI0\");\nparcelRequire(\"bMpwc\");\nparcelRequire(\"g1uI7\");\n\nvar $hGVxz = parcelRequire(\"hGVxz\");\n// const axios = require(\"axios\");\nconst $350f07e7923c52b5$var$filmList = document.querySelector(\".home-film-list\");\nconst $350f07e7923c52b5$var$loader = document.querySelector(\".loader-container\");\nlet $350f07e7923c52b5$var$currentPage = 1;\nlet $350f07e7923c52b5$var$itemsPerPage = 20;\nconst $350f07e7923c52b5$var$fetchData = async (page = 1)=>{\n    try {\n        const response = await (0, $hGVxz.default).get(`https://api.themoviedb.org/3/movie/popular?api_key=c2f18aa0c4ee94c87f87834077fd721a&language=en-EN&per_page=${$350f07e7923c52b5$var$itemsPerPage}&page=${page}`);\n        let currentFilmIndex = 0;\n        const movies = response.data.results;\n        console.log(movies);\n        $350f07e7923c52b5$var$loader.classList.remove(\"visually-hidden\");\n        // Pobieranie gatunków filmowych\n        const genresResponse = await (0, $hGVxz.default).get(`https://api.themoviedb.org/3/genre/movie/list?api_key=c2f18aa0c4ee94c87f87834077fd721a&language=en-EN`);\n        const genresMap = {};\n        genresResponse.data.genres.forEach((genre)=>{\n            genresMap[genre.id] = genre.name;\n        });\n        // Tworzenie markupu dla każdego filmu\n        const markupArray = movies.map((movie)=>{\n            const genreNames = movie.genre_ids.map((genreId)=>genresMap[genreId]).slice(0, 2);\n            const genresMarkup = genreNames.join(\", \");\n            return `\n        <li class=\"home-film-item\" data-index=\"${currentFilmIndex++}\" data-modal-open>\n          <img class=\"home-film-image\" src=\"https://image.tmdb.org/t/p/original/${movie.poster_path}\" alt=\"${movie.title}\">\n          <div class=\"home-film-details\">\n            <h2 class=\"home-film-title\">${movie.title}</h2>\n            <p class=\"home-film-info\">\n              <span class=\"home-film-type\">${genresMarkup}</span> |\n              <span class=\"home-film-year\">${movie.release_date.slice(0, 4)}</span>\n              <span class=\"home-film-rating\">${movie.vote_average.toFixed(1)}</span>\n            </p>\n          </div>\n        </li>`;\n        });\n        $350f07e7923c52b5$var$loader.classList.add(\"visually-hidden\");\n        // Wstawianie wygenerowanego markupu do elementu HTML\n        $350f07e7923c52b5$var$filmList.innerHTML = markupArray.join(\"\");\n    } catch (error) {\n        console.error(\"Error fetching data:\", error);\n    }\n};\n// Wywołanie funkcji fetchData, aby pobrać dane i wygenerować markup filmów\n$350f07e7923c52b5$var$fetchData();\n\n\nparcelRequire(\"7UJs8\");\nparcelRequire(\"hHD3f\");\nconst $2b17edf3abe45593$var$toTop = document.querySelector(\".to-top\");\nwindow.addEventListener(\"scroll\", ()=>{\n    const modal = document.querySelector(\"[data-modal]:not(.film-details-is-hidden)\");\n    if (modal) {\n        $2b17edf3abe45593$var$toTop.classList.remove(\"active\");\n        return;\n    }\n    if (window.scrollY > 215) $2b17edf3abe45593$var$toTop.classList.add(\"active\");\n    else $2b17edf3abe45593$var$toTop.classList.remove(\"active\");\n});\n// Nasłuchiwanie kliknięcia otwierającego okno modalne\ndocument.body.addEventListener(\"click\", (event)=>{\n    if (event.target.closest(\"[data-modal-open]\")) $2b17edf3abe45593$var$toTop.classList.remove(\"active\"); //\n});\n// Nasłuchiwanie zdarzenia zamknięcia okna modalnego\ndocument.addEventListener(\"click\", (event)=>{\n    const modalCloseButton = event.target.closest(\".film-details-close\");\n    const modal = document.querySelector(\"[data-modal]\");\n    if (modalCloseButton || event.target === modal) {\n        if (window.scrollY > 215) $2b17edf3abe45593$var$toTop.classList.add(\"active\");\n    }\n});\n\n\nparcelRequire(\"cB4zx\");\nparcelRequire(\"2AKVI\");\nparcelRequire(\"46SdE\");\n\n\n//# sourceMappingURL=index.262e2ab3.js.map\n","import './css/main.css';\n\nimport './js/fetchFilms.js';\nimport './js/logWindow.js';\nimport './js/mobileMenu.js';\nimport './js/modal.js';\nimport './js/modalButtons.js';\nimport './js/pagination.js';\nimport './js/popularFilms.js';\nimport './js/modal-team.js';\nimport './js/darkMode.js';\nimport './js/to-top.js';\nimport './js/buttonEffects.js';\n\nimport { initializeApp } from 'firebase/app';\nimport { getAuth } from 'firebase/auth';\n","\n// axios\nimport axios from 'axios';\nimport Notiflix from 'notiflix';\n// // projekt fetch api movie\n// const API_KEY = 'AIzaSyDrsw02tJfVOg5942KrmMQDgPqT2tORfaM';\n// const BASE_URL = 'https://api.themoviedb.org/3';\n\n// \n// // searchBtm = document\n\n\n// const options = {\n//   method: 'GET',\n//   url: 'https://api.themoviedb.org/3/search/movie',\n//   params: {\n//     include_adult: 'false',\n//     language: 'en-US',\n//     page: '1',\n//   },\n//   headers: { accept: 'application/json' },\n// };\n\n// // axios\n// //   .request(options)\n// //   .then(function (response) {\n// //     console.log(response.data);\n// //   })\n// //   .catch(function (error) {\n// //     console.error(error);\n// //   });\n// // zapytanie o popularne filmy\n// export async function getTrendingMovies() {\n//   const searchParams = {\n//     params: {\n//       page: this.page,\n//       api_key: API_KEY,\n//     },\n//   };\n\n//   return axios.get(`${BASE_URL}trending/movie/week`, searchParams);\n// }\n// // try {\n// //   const resp = await fetch(\n// //     `${BASE_URL}/trending/all/day?api_key=${API_KEY}&language=en-US&page=${page}`,\n// //   );\n\n// //   if (!resp.ok) throw new Error(resp.status);\n\n// //   return await resp.json();\n// // } catch (err) {\n// //   console.error(err.message);\n// // }\n// // zapytanie o gatunki\n// export async function getGenres() {\n//   const searchParams = {\n//     params: {\n//       page: this.page,\n//       api_key: API_KEY,\n//     },\n//   };\n\n//   return axios.get(`${BASE_URL}genre/movie/list`, searchParams);\n// }\n// // try {\n// //   const response = await fetch(`${BASE_URL}/genre/movie/list?api_key=${API_KEY}&language=en-US`);\n// //   const respGenres = await response.json();\n\n// //   return respGenres;\n// // } catch (error) {\n// //   console.log(error.message);\n// // }\n\n// // zapytanie po id\n// export async function fetchTrailer(id) {\n//   try {\n//     const responce = await fetch(\n//       `${BASE_URL}/movie/${id}/videos?api_key =${API_KEY}`,\n//     );\n//     const data = await responce.json();\n\n//     return data;\n//   } catch (error) {\n//     console.log(error.message);\n//   }\n// }\nconst searchForm = document.querySelector('#search-form');\n// query\nexport async function fetchFilmsByQuery() {\nconst options = {\n  method: 'GET',\n  url: 'https://api.themoviedb.org/3/search/movie',\n  params: {\n    query: `${searchForm.elements.searchQuery.value.trim().split(\" \").join(`%20`)}`,\n    include_adult: 'false',\n    language: 'en-US',\n    page: '1'\n  },\n  headers: {\n    accept: 'application/json',\n    Authorization: 'Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwNjRiYzVmYTA0ZTcwZWUwNmI1YmZjZmZkZDAwMjhmZiIsInN1YiI6IjY1ZjFiYzIwZDY0YWMyMDBjYTVkMWU2YSIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.kSA66Srxuh9huCM-91QWv-1PAFYBxqjt-fFzzJb4bmg'\n  }\n};\n\naxios.request(options)\n  .then(function (response) {\n    console.log(response.data);\n  })\n  .catch(function (error) {\n    console.error(error);\n  });\n}\n\nsearchForm.addEventListener(\"submit\", (evt) => {\n  evt.preventDefault();\n  if(searchForm.elements.searchQuery.value.trim()==\"\"){\n      Notiflix.Notify.warning('Enter some text...');\n\n  }else{\n\n  fetchFilmsByQuery();\n\n  }\n});","import axios from 'axios';\n// const axios = require(\"axios\");\n\nconst filmList = document.querySelector('.home-film-list');\nconst loader = document.querySelector('.loader-container');\n\nlet currentPage = 1;\nlet itemsPerPage = 20;\n\nconst fetchData = async (page = 1) => {\n  try {\n    const response = await axios.get(\n      `https://api.themoviedb.org/3/movie/popular?api_key=c2f18aa0c4ee94c87f87834077fd721a&language=en-EN&per_page=${itemsPerPage}&page=${page}`,\n    );\n    let currentFilmIndex = 0;\n    const movies = response.data.results;\n    console.log(movies);\n    loader.classList.remove('visually-hidden');\n    // Pobieranie gatunków filmowych\n    const genresResponse = await axios.get(\n      `https://api.themoviedb.org/3/genre/movie/list?api_key=c2f18aa0c4ee94c87f87834077fd721a&language=en-EN`,\n    );\n    const genresMap = {};\n    genresResponse.data.genres.forEach(genre => {\n      genresMap[genre.id] = genre.name;\n    });\n\n    // Tworzenie markupu dla każdego filmu\n    const markupArray = movies.map(movie => {\n      const genreNames = movie.genre_ids.map(genreId => genresMap[genreId]).slice(0, 2);\n      const genresMarkup = genreNames.join(', ');\n      return `\n        <li class=\"home-film-item\" data-index=\"${currentFilmIndex++}\" data-modal-open>\n          <img class=\"home-film-image\" src=\"https://image.tmdb.org/t/p/original/${\n            movie.poster_path\n          }\" alt=\"${movie.title}\">\n          <div class=\"home-film-details\">\n            <h2 class=\"home-film-title\">${movie.title}</h2>\n            <p class=\"home-film-info\">\n              <span class=\"home-film-type\">${genresMarkup}</span> |\n              <span class=\"home-film-year\">${movie.release_date.slice(0, 4)}</span>\n              <span class=\"home-film-rating\">${movie.vote_average.toFixed(1)}</span>\n            </p>\n          </div>\n        </li>`;\n    });\n    loader.classList.add('visually-hidden');\n    // Wstawianie wygenerowanego markupu do elementu HTML\n    filmList.innerHTML = markupArray.join('');\n  } catch (error) {\n    console.error('Error fetching data:', error);\n  }\n};\n\n// Wywołanie funkcji fetchData, aby pobrać dane i wygenerować markup filmów\nfetchData();\n","const toTop = document.querySelector('.to-top');\n\nwindow.addEventListener('scroll', () => {\n  const modal = document.querySelector('[data-modal]:not(.film-details-is-hidden)');\n\n  if (modal) {\n    toTop.classList.remove('active');\n    return;\n  }\n\n  if (window.scrollY > 215) {\n    toTop.classList.add('active');\n  } else {\n    toTop.classList.remove('active'); \n  }\n});\n\n// Nasłuchiwanie kliknięcia otwierającego okno modalne\ndocument.body.addEventListener('click', (event) => {\n  if (event.target.closest('[data-modal-open]')) {\n    toTop.classList.remove('active'); //\n  }\n});\n\n// Nasłuchiwanie zdarzenia zamknięcia okna modalnego\ndocument.addEventListener('click', (event) => {\n  const modalCloseButton = event.target.closest('.film-details-close');\n  const modal = document.querySelector('[data-modal]');\n  \n  if (modalCloseButton || event.target === modal) {\n    if (window.scrollY > 215) {\n      toTop.classList.add('active');\n    }\n  }\n});\n"],"names":["$parcel$global","globalThis","$parcel$modules","$parcel$inits","parcelRequire","id","exports","init","module","call","err","Error","code","register","$hGVxz","$lzX4I","$9a7554dd658d5eed$var$searchForm","document","querySelector","$9a7554dd658d5eed$export$9032d802dd688362","options","method","url","params","query","elements","searchQuery","value","trim","split","join","include_adult","language","page","headers","accept","Authorization","default","request","then","response","console","log","data","catch","error","addEventListener","evt","preventDefault","a","__esModule","Notify","warning","$350f07e7923c52b5$var$filmList","$350f07e7923c52b5$var$loader","$350f07e7923c52b5$var$fetchData","get","currentFilmIndex","movies","results","classList","remove","genresResponse","genresMap","genres","forEach","genre","name","markupArray","map","movie","genresMarkup","genreNames","genre_ids","genreId","slice","poster_path","title","release_date","vote_average","toFixed","add","innerHTML","$2b17edf3abe45593$var$toTop","window","scrollY","body","event","target","closest","modalCloseButton","modal"],"version":3,"file":"index.262e2ab3.js.map"}