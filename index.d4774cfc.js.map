{"mappings":"A,I,E,W,E,C,E,E,C,E,E,E,iB,A,O,I,A,C,E,S,C,E,G,K,E,O,C,C,E,C,O,C,G,K,E,C,I,E,C,C,E,A,Q,C,C,E,C,I,E,C,G,E,Q,C,C,E,O,C,C,E,C,E,E,I,C,E,O,C,E,E,O,E,E,O,A,C,I,E,A,M,uB,E,I,O,E,I,C,mB,C,C,E,Q,C,S,C,C,C,E,C,C,E,C,C,E,E,iB,C,G,E,Q,C,I,E,E,S,E,S,E,S,E,S,E,S,E,S,I,E,E,SGGA,MAAM,EAAW,SAAS,aAAa,CAAC,mBAkDxC,AA7CkB,CAAA,MAAO,EAAO,CAAC,IAC/B,GAAI,CACF,IAAM,EAAW,MAAM,AAAA,CAAA,EAAA,EAAA,OAAI,AAAJ,EAAM,GAAG,CAC9B,uHAAoI,GAAM,EAExI,EAAmB,EACjB,EAAS,EAAS,IAAI,CAAC,OAAO,CACpC,QAAQ,GAAG,CAAC,GAEZ,IAAM,EAAiB,MAAM,AAAA,CAAA,EAAA,EAAA,OAAI,AAAJ,EAAM,GAAG,CACpC,yGAEI,EAAY,CAAC,EACnB,EAAe,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,AAAA,IACjC,CAAS,CAAC,EAAM,EAAE,CAAC,CAAG,EAAM,IAAI,AAClC,GAGA,IAAM,EAAc,EAAO,GAAG,CAAC,AAAA,IAE7B,IAAM,EAAe,AADF,EAAM,SAAS,CAAC,GAAG,CAAC,AAAA,GAAW,CAAS,CAAC,EAAQ,EAAE,KAAK,CAAC,EAAG,GAC/C,IAAI,CAAC,MACrC,MAAO,CAAC;+CACiC,EAAE,IAAmB;gFACY,EACpE,EAAM,WAAW,CAClB,OAAO,EAAE,EAAM,KAAK,CAAC;;wCAEQ,EAAE,EAAM,KAAK,CAAC;;2CAEX,EAAE,EAAa;2CACf,EAAE,EAAM,YAAY,CAAC,KAAK,CAAC,EAAG,GAAG;6CAC/B,EAAE,EAAM,YAAY,CAAC,OAAO,CAAC,GAAG;;;aAGhE,CAAC,AACV,EAGA,CAAA,EAAS,SAAS,CAAG,EAAY,IAAI,CAAC,GACxC,CAAE,MAAO,EAAO,CACd,QAAQ,KAAK,CAAC,uBAAwB,EACxC,CACF,CAAA,I,E,S,E,S,E,S,E","sources":["<anon>","src/index.js","src/js/fetchFilms.js","src/js/popularFilms.js"],"sourcesContent":["\n      var $parcel$global = globalThis;\n    \nvar $parcel$modules = {};\nvar $parcel$inits = {};\n\nvar parcelRequire = $parcel$global[\"parcelRequired7c6\"];\n\nif (parcelRequire == null) {\n  parcelRequire = function(id) {\n    if (id in $parcel$modules) {\n      return $parcel$modules[id].exports;\n    }\n    if (id in $parcel$inits) {\n      var init = $parcel$inits[id];\n      delete $parcel$inits[id];\n      var module = {id: id, exports: {}};\n      $parcel$modules[id] = module;\n      init.call(module.exports, module, module.exports);\n      return module.exports;\n    }\n    var err = new Error(\"Cannot find module '\" + id + \"'\");\n    err.code = 'MODULE_NOT_FOUND';\n    throw err;\n  };\n\n  parcelRequire.register = function register(id, init) {\n    $parcel$inits[id] = init;\n  };\n\n  $parcel$global[\"parcelRequired7c6\"] = parcelRequire;\n}\n\nvar parcelRegister = parcelRequire.register;\n\n\nvar $hGVxz = parcelRequire(\"hGVxz\");\n\"use strict\";\n// projekt fetch api movie\nconst $9a7554dd658d5eed$var$API_KEY = \"AIzaSyDrsw02tJfVOg5942KrmMQDgPqT2tORfaM\";\nconst $9a7554dd658d5eed$var$BASE_URL = \"https://api.themoviedb.org/3\";\nconst $9a7554dd658d5eed$var$options = {\n    method: \"GET\",\n    url: \"https://api.themoviedb.org/3/search/movie\",\n    params: {\n        include_adult: \"false\",\n        language: \"en-US\",\n        page: \"1\"\n    },\n    headers: {\n        accept: \"application/json\"\n    }\n};\nasync function $9a7554dd658d5eed$export$6405226d42414f72() {\n    const searchParams = {\n        params: {\n            page: this.page,\n            api_key: $9a7554dd658d5eed$var$API_KEY\n        }\n    };\n    return (0, $hGVxz.default).get(`${$9a7554dd658d5eed$var$BASE_URL}trending/movie/week`, searchParams);\n}\nasync function $9a7554dd658d5eed$export$c5604fa8028da00() {\n    const searchParams = {\n        params: {\n            page: this.page,\n            api_key: $9a7554dd658d5eed$var$API_KEY\n        }\n    };\n    return (0, $hGVxz.default).get(`${$9a7554dd658d5eed$var$BASE_URL}genre/movie/list`, searchParams);\n}\nasync function $9a7554dd658d5eed$export$16b5f39e5defaec7(id) {\n    try {\n        const responce = await fetch(`${$9a7554dd658d5eed$var$BASE_URL}/movie/${id}/videos?api_key=${$9a7554dd658d5eed$var$API_KEY}`);\n        const data = await responce.json();\n        return data;\n    } catch (error) {\n        console.log(error.message);\n    }\n}\nasync function $9a7554dd658d5eed$export$9032d802dd688362() {\n    const searchParams = {\n        params: {\n            page: this.page,\n            api_key: $9a7554dd658d5eed$var$API_KEY,\n            query: this.query\n        }\n    };\n    return (0, $hGVxz.default).get(`${$9a7554dd658d5eed$var$BASE_URL}search/movie`, searchParams);\n}\n\n\nparcelRequire(\"kBG4Y\");\nparcelRequire(\"4boOf\");\nparcelRequire(\"40lI0\");\nparcelRequire(\"bMpwc\");\nparcelRequire(\"g1uI7\");\n\nvar $hGVxz = parcelRequire(\"hGVxz\");\n// const axios = require(\"axios\");\nconst $350f07e7923c52b5$var$filmList = document.querySelector(\".home-film-list\");\nlet $350f07e7923c52b5$var$currentPage = 1;\nlet $350f07e7923c52b5$var$itemsPerPage = 20;\nconst $350f07e7923c52b5$var$fetchData = async (page = 1)=>{\n    try {\n        const response = await (0, $hGVxz.default).get(`https://api.themoviedb.org/3/movie/popular?api_key=c2f18aa0c4ee94c87f87834077fd721a&language=en-EN&per_page=${$350f07e7923c52b5$var$itemsPerPage}&page=${page}`);\n        let currentFilmIndex = 0;\n        const movies = response.data.results;\n        console.log(movies);\n        // Pobieranie gatunków filmowych\n        const genresResponse = await (0, $hGVxz.default).get(`https://api.themoviedb.org/3/genre/movie/list?api_key=c2f18aa0c4ee94c87f87834077fd721a&language=en-EN`);\n        const genresMap = {};\n        genresResponse.data.genres.forEach((genre)=>{\n            genresMap[genre.id] = genre.name;\n        });\n        // Tworzenie markupu dla każdego filmu\n        const markupArray = movies.map((movie)=>{\n            const genreNames = movie.genre_ids.map((genreId)=>genresMap[genreId]).slice(0, 2);\n            const genresMarkup = genreNames.join(\", \");\n            return `\n        <li class=\"home-film-item\" data-index=\"${currentFilmIndex++}\" data-modal-open>\n          <img class=\"home-film-image\" src=\"https://image.tmdb.org/t/p/original/${movie.poster_path}\" alt=\"${movie.title}\">\n          <div class=\"home-film-details\">\n            <h2 class=\"home-film-title\">${movie.title}</h2>\n            <p class=\"home-film-info\">\n              <span class=\"home-film-type\">${genresMarkup}</span> |\n              <span class=\"home-film-year\">${movie.release_date.slice(0, 4)}</span>\n              <span class=\"home-film-rating\">${movie.vote_average.toFixed(1)}</span>\n            </p>\n          </div>\n        </li>`;\n        });\n        // Wstawianie wygenerowanego markupu do elementu HTML\n        $350f07e7923c52b5$var$filmList.innerHTML = markupArray.join(\"\");\n    } catch (error) {\n        console.error(\"Error fetching data:\", error);\n    }\n};\n// Wywołanie funkcji fetchData, aby pobrać dane i wygenerować markup filmów\n$350f07e7923c52b5$var$fetchData();\n\n\nparcelRequire(\"7UJs8\");\nparcelRequire(\"cB4zx\");\nparcelRequire(\"2AKVI\");\nparcelRequire(\"46SdE\");\n\n\n//# sourceMappingURL=index.d4774cfc.js.map\n","import './css/main.css';\n\nimport './js/fetchFilms.js';\nimport './js/logWindow.js';\nimport './js/mobileMenu.js';\nimport './js/modal.js';\nimport './js/modalButtons.js';\nimport './js/pagination.js';\nimport './js/popularFilms.js';\nimport './js/modal-team.js';\nimport './js/buttonEffects.js';\n\nimport { initializeApp } from 'firebase/app';\nimport { getAuth } from 'firebase/auth';\n","'use strict';\n// axios\nimport axios from 'axios';\n// projekt fetch api movie\nconst API_KEY = 'AIzaSyDrsw02tJfVOg5942KrmMQDgPqT2tORfaM';\nconst BASE_URL = 'https://api.themoviedb.org/3';\n\nconst options = {\n  method: 'GET',\n  url: 'https://api.themoviedb.org/3/search/movie',\n  params: {\n    include_adult: 'false',\n    language: 'en-US',\n    page: '1',\n  },\n  headers: { accept: 'application/json' },\n};\n\n// axios\n//   .request(options)\n//   .then(function (response) {\n//     console.log(response.data);\n//   })\n//   .catch(function (error) {\n//     console.error(error);\n//   });\n// zapytanie o popularne filmy\nexport async function getTrendingMovies() {\n  const searchParams = {\n    params: {\n      page: this.page,\n      api_key: API_KEY,\n    },\n  };\n\n  return axios.get(`${BASE_URL}trending/movie/week`, searchParams);\n}\n// try {\n//   const resp = await fetch(\n//     `${BASE_URL}/trending/all/day?api_key=${API_KEY}&language=en-US&page=${page}`,\n//   );\n\n//   if (!resp.ok) throw new Error(resp.status);\n\n//   return await resp.json();\n// } catch (err) {\n//   console.error(err.message);\n// }\n// zapytanie o gatunki\nexport async function getGenres() {\n  const searchParams = {\n    params: {\n      page: this.page,\n      api_key: API_KEY,\n    },\n  };\n\n  return axios.get(`${BASE_URL}genre/movie/list`, searchParams);\n}\n// try {\n//   const response = await fetch(`${BASE_URL}/genre/movie/list?api_key=${API_KEY}&language=en-US`);\n//   const respGenres = await response.json();\n\n//   return respGenres;\n// } catch (error) {\n//   console.log(error.message);\n// }\n\n// zapytanie po id\nexport async function fetchTrailer(id) {\n  try {\n    const responce = await fetch(\n      `${BASE_URL}/movie/${id}/videos?api_key=${API_KEY}`,\n    );\n    const data = await responce.json();\n\n    return data;\n  } catch (error) {\n    console.log(error.message);\n  }\n}\n\n// query\nexport async function fetchFilmsByQuery() {\n  const searchParams = {\n    params: {\n      page: this.page,\n      api_key: API_KEY,\n      query: this.query,\n    },\n  };\n\n  return axios.get(`${BASE_URL}search/movie`, searchParams);\n}\n","import axios from 'axios';\n// const axios = require(\"axios\");\n\nconst filmList = document.querySelector('.home-film-list');\n\nlet currentPage = 1;\nlet itemsPerPage = 20;\n\nconst fetchData = async (page = 1) => {\n  try {\n    const response = await axios.get(\n      `https://api.themoviedb.org/3/movie/popular?api_key=c2f18aa0c4ee94c87f87834077fd721a&language=en-EN&per_page=${itemsPerPage}&page=${page}`,\n    );\n    let currentFilmIndex = 0;\n    const movies = response.data.results;\n    console.log(movies);\n    // Pobieranie gatunków filmowych\n    const genresResponse = await axios.get(\n      `https://api.themoviedb.org/3/genre/movie/list?api_key=c2f18aa0c4ee94c87f87834077fd721a&language=en-EN`,\n    );\n    const genresMap = {};\n    genresResponse.data.genres.forEach(genre => {\n      genresMap[genre.id] = genre.name;\n    });\n\n    // Tworzenie markupu dla każdego filmu\n    const markupArray = movies.map(movie => {\n      const genreNames = movie.genre_ids.map(genreId => genresMap[genreId]).slice(0, 2);\n      const genresMarkup = genreNames.join(', ');\n      return `\n        <li class=\"home-film-item\" data-index=\"${currentFilmIndex++}\" data-modal-open>\n          <img class=\"home-film-image\" src=\"https://image.tmdb.org/t/p/original/${\n            movie.poster_path\n          }\" alt=\"${movie.title}\">\n          <div class=\"home-film-details\">\n            <h2 class=\"home-film-title\">${movie.title}</h2>\n            <p class=\"home-film-info\">\n              <span class=\"home-film-type\">${genresMarkup}</span> |\n              <span class=\"home-film-year\">${movie.release_date.slice(0, 4)}</span>\n              <span class=\"home-film-rating\">${movie.vote_average.toFixed(1)}</span>\n            </p>\n          </div>\n        </li>`;\n    });\n\n    // Wstawianie wygenerowanego markupu do elementu HTML\n    filmList.innerHTML = markupArray.join('');\n  } catch (error) {\n    console.error('Error fetching data:', error);\n  }\n};\n\n// Wywołanie funkcji fetchData, aby pobrać dane i wygenerować markup filmów\nfetchData();\n"],"names":["$parcel$global","globalThis","$parcel$modules","$parcel$inits","parcelRequire","id","exports","init","module","call","err","Error","code","register","$hGVxz","$350f07e7923c52b5$var$filmList","document","querySelector","$350f07e7923c52b5$var$fetchData","page","response","default","get","currentFilmIndex","movies","data","results","console","log","genresResponse","genresMap","genres","forEach","genre","name","markupArray","map","movie","genresMarkup","genreNames","genre_ids","genreId","slice","join","poster_path","title","release_date","vote_average","toFixed","innerHTML","error"],"version":3,"file":"index.d4774cfc.js.map"}