{"mappings":"A,I,E,W,E,C,E,E,C,E,E,E,iB,A,O,I,A,C,E,S,C,E,G,K,E,O,C,C,E,C,O,C,G,K,E,C,I,E,C,C,E,A,Q,C,C,E,C,I,E,C,G,E,Q,C,C,E,O,C,C,E,C,E,E,I,C,E,O,C,E,E,O,E,E,O,A,C,I,E,A,M,uB,E,I,O,E,I,C,mB,C,C,E,Q,C,S,C,C,C,E,C,C,E,C,C,E,E,iB,C,G,E,Q,C,I,E,E,SEUA,MAAM,EAAgB,KAAK,KAAK,CAAC,aAAa,OAAO,CAAC,oBAAsB,EAAE,CAC9E,QAAQ,GAAG,CAAC,mBACZ,QAAQ,GAAG,CAAC,GAGZ,MAAM,EAAkB,EAAc,GAAG,CAAC,AAAA,IACtC,IAAM,EAAU,EAAM,KAAK,CAAC,aAC5B,OAAO,EAAU,CAAO,CAAC,EAAE,CAAG,IAClC,GAEA,QAAQ,GAAG,CAAC,sBACZ,QAAQ,GAAG,CAAC,GAGZ,MAAM,EAAc,KAAK,KAAK,CAAC,aAAa,OAAO,CAAC,kBAAoB,EAAE,CAC1E,QAAQ,GAAG,CAAC,iBACZ,QAAQ,GAAG,CAAC,GAGZ,MAAM,EAAgB,EAAY,GAAG,CAAC,AAAA,IAClC,IAAM,EAAU,EAAM,KAAK,CAAC,aAC5B,OAAO,EAAU,CAAO,CAAC,EAAE,CAAG,IAClC,GAEA,QAAQ,GAAG,CAAC,oBACZ,QAAQ,GAAG,CAAC,GAGZ,SAAS,gBAAgB,CAAC,mBAAoB,KAC1C,IAAM,EAAgB,SAAS,cAAc,CAAC,cACxC,EAAc,SAAS,cAAc,CAAC,YACtC,EAAiB,SAAS,aAAa,CAAC,oBAa9C,eAAe,EAAc,CAAU,EACnC,IAAM,EAAc,KAAK,KAAK,CAAC,aAAa,OAAO,CAAC,KAAgB,EAAE,CAGtE,GAAI,CAAC,GAAe,AAAuB,IAAvB,EAAY,MAAM,CAAQ,CAC1C,EAAe,SAAS,CAAG,iCAC3B,MACJ,CAGA,GAAI,CAEA,IAAK,IAAM,KAAW,EAAa,KAwBhB,EAvBf,IAEM,GAqBS,EAvBM,MAAM,EAAkB,GAwB9C,CAAC;;oBAEI,EAAE,EAAa,KAAK,CAAC;mBACtB,EAAE,EAAa,QAAQ,CAAC;;QAEnC,CAAC,EA1BO,EAAe,kBAAkB,CAAC,YAAa,EACnD,CACJ,CAAE,MAAO,EAAO,CACZ,QAAQ,KAAK,CAAC,2BAA4B,EAC9C,CACJ,CAGA,eAAe,EAAkB,CAAO,EACpC,GAAI,CAGA,MAAO,AADU,CAAA,MAAM,AAAA,CAAA,EAAA,EAAA,OAAI,AAAJ,EAAM,GAAG,CAAC,qCAAqB,2DAA2C,CAAA,EACjF,IAAI,AACxB,CAAE,MAAO,EAAO,CAEZ,MADA,QAAQ,KAAK,CAAC,gCAAiC,GACzC,AAAI,MAAM,gCACpB,CACJ,CA3CA,EAAc,gBAAgB,CAAC,QAAS,KACpC,EAAc,iBAClB,GAGA,EAAY,gBAAgB,CAAC,QAAS,KAClC,EAAc,eAClB,EA+CJ,G,E,S,E,S,E,S,E,S,E,S,E,S,E,S,E,S,E","sources":["<anon>","src/js/my-library.js","src/js/headerLib.js"],"sourcesContent":["\n      var $parcel$global = globalThis;\n    \nvar $parcel$modules = {};\nvar $parcel$inits = {};\n\nvar parcelRequire = $parcel$global[\"parcelRequired7c6\"];\n\nif (parcelRequire == null) {\n  parcelRequire = function(id) {\n    if (id in $parcel$modules) {\n      return $parcel$modules[id].exports;\n    }\n    if (id in $parcel$inits) {\n      var init = $parcel$inits[id];\n      delete $parcel$inits[id];\n      var module = {id: id, exports: {}};\n      $parcel$modules[id] = module;\n      init.call(module.exports, module, module.exports);\n      return module.exports;\n    }\n    var err = new Error(\"Cannot find module '\" + id + \"'\");\n    err.code = 'MODULE_NOT_FOUND';\n    throw err;\n  };\n\n  parcelRequire.register = function register(id, init) {\n    $parcel$inits[id] = init;\n  };\n\n  $parcel$global[\"parcelRequired7c6\"] = parcelRequire;\n}\n\nvar parcelRegister = parcelRequire.register;\n\n\nvar $hGVxz = parcelRequire(\"hGVxz\");\n\"use strict\";\n// API key and base URL\nconst $441b9e87ca3cf489$var$API_KEY = \"5abbb3dbf9a78bf33887465dc33dbfa3\";\nconst $441b9e87ca3cf489$var$BASE_URL = \"https://api.themoviedb.org/\";\n// Pobranie danych z localStorage dla klucza 'movies-watched'\nconst $441b9e87ca3cf489$var$watchedMovies = JSON.parse(localStorage.getItem(\"movies-watched\")) || [];\nconsole.log(\"Watched Movies:\");\nconsole.log($441b9e87ca3cf489$var$watchedMovies);\n// Wyodrębnienie ID filmów z danych zapisanych w localStorage\nconst $441b9e87ca3cf489$var$watchedMovieIds = $441b9e87ca3cf489$var$watchedMovies.map((movie)=>{\n    const idMatch = movie.match(/ID: (\\d+)/);\n    return idMatch ? idMatch[1] : null;\n});\nconsole.log(\"Watched Movie IDs:\");\nconsole.log($441b9e87ca3cf489$var$watchedMovieIds);\n// Pobranie danych z localStorage dla klucza 'movies-queue'\nconst $441b9e87ca3cf489$var$queueMovies = JSON.parse(localStorage.getItem(\"movies-queue\")) || [];\nconsole.log(\"Queue Movies:\");\nconsole.log($441b9e87ca3cf489$var$queueMovies);\n// Wyodrębnienie ID filmów z danych zapisanych w localStorage\nconst $441b9e87ca3cf489$var$queueMovieIds = $441b9e87ca3cf489$var$queueMovies.map((movie)=>{\n    const idMatch = movie.match(/ID: (\\d+)/);\n    return idMatch ? idMatch[1] : null;\n});\nconsole.log(\"Queue Movie IDs:\");\nconsole.log($441b9e87ca3cf489$var$queueMovieIds);\n// Nasłuchiwanie zdarzenia DOMContentLoaded\ndocument.addEventListener(\"DOMContentLoaded\", ()=>{\n    const buttonWatched = document.getElementById(\"btnWatched\");\n    const buttonQueue = document.getElementById(\"btnQueue\");\n    const galleryLibrary = document.querySelector(\".gallery-library\");\n    // Dodanie nasłuchiwania kliknięcia na przycisk \"Watched\"\n    buttonWatched.addEventListener(\"click\", ()=>{\n        renderLibrary(\"movies-watched\");\n    });\n    // Dodanie nasłuchiwania kliknięcia na przycisk \"Queue\"\n    buttonQueue.addEventListener(\"click\", ()=>{\n        renderLibrary(\"movies-queue\");\n    });\n    // Funkcja renderująca bibliotekę filmów\n    async function renderLibrary(storageKey) {\n        const libraryData = JSON.parse(localStorage.getItem(storageKey)) || [];\n        // Sprawdzenie czy dane istnieją i czy nie są puste\n        if (!libraryData || libraryData.length === 0) {\n            galleryLibrary.innerHTML = \"<p>Brak film\\xf3w w bibliotece<p>\";\n            return;\n        }\n        try {\n            // Iteracja po ID filmów i pobranie ich szczegółów\n            for (const movieId of libraryData){\n                const movieDetails = await fetchMovieDetails(movieId);\n                // Wygenerowanie markupu filmu i dodanie go do galerii\n                const movieMarkup = createMovieMarkup(movieDetails);\n                galleryLibrary.insertAdjacentHTML(\"beforeend\", movieMarkup);\n            }\n        } catch (error) {\n            console.error(\"Error rendering library:\", error);\n        }\n    }\n    // Funkcja pobierająca szczegóły filmu z API\n    async function fetchMovieDetails(movieId) {\n        try {\n            // Wykonanie zapytania do API \n            const response = await (0, $hGVxz.default).get(`${$441b9e87ca3cf489$var$BASE_URL}/movie/${movieId}?api_key=${$441b9e87ca3cf489$var$API_KEY}&language=en-EN`);\n            return response.data;\n        } catch (error) {\n            console.error(\"Error fetching movie details:\", error);\n            throw new Error(\"Failed to fetch movie details\");\n        }\n    }\n    // Funkcja tworząca markup filmu\n    function createMovieMarkup(movieDetails) {\n        return `\n            <div class=\"movie\">\n                <h2>${movieDetails.title}</h2>\n                <p>${movieDetails.overview}</p>\n            </div>\n        `;\n    }\n});\n\n\nparcelRequire(\"g1uI7\");\nparcelRequire(\"40lI0\");\nparcelRequire(\"bMpwc\");\nparcelRequire(\"7UJs8\");\nparcelRequire(\"kBG4Y\");\nparcelRequire(\"4boOf\");\nparcelRequire(\"hHD3f\");\nparcelRequire(\"2AKVI\");\nparcelRequire(\"46SdE\");\n\n\n//# sourceMappingURL=my-library.dfdfec5e.js.map\n","import '../css/main.css';\n\nimport './headerLib.js';\nimport './pagination.js';\nimport './modal.js';\nimport './modalButtons.js';\nimport './modal-team.js';\nimport './logWindow.js';\nimport './mobileMenu.js';\nimport './darkMode.js';\n\nimport { initializeApp } from 'firebase/app';\nimport { getAuth } from 'firebase/auth';\n","'use strict';\n\n// Import axios\nimport axios from 'axios';\n\n// API key and base URL\nconst API_KEY = '5abbb3dbf9a78bf33887465dc33dbfa3';\nconst BASE_URL = 'https://api.themoviedb.org/';\n\n// Pobranie danych z localStorage dla klucza 'movies-watched'\nconst watchedMovies = JSON.parse(localStorage.getItem('movies-watched')) || [];\nconsole.log(\"Watched Movies:\");\nconsole.log(watchedMovies);\n\n// Wyodrębnienie ID filmów z danych zapisanych w localStorage\nconst watchedMovieIds = watchedMovies.map(movie => {\n    const idMatch = movie.match(/ID: (\\d+)/);\n    return idMatch ? idMatch[1] : null;\n}); \n\nconsole.log(\"Watched Movie IDs:\");\nconsole.log(watchedMovieIds);\n\n// Pobranie danych z localStorage dla klucza 'movies-queue'\nconst queueMovies = JSON.parse(localStorage.getItem('movies-queue')) || [];\nconsole.log(\"Queue Movies:\");\nconsole.log(queueMovies);\n\n// Wyodrębnienie ID filmów z danych zapisanych w localStorage\nconst queueMovieIds = queueMovies.map(movie => {\n    const idMatch = movie.match(/ID: (\\d+)/);\n    return idMatch ? idMatch[1] : null;\n}); \n\nconsole.log(\"Queue Movie IDs:\");\nconsole.log(queueMovieIds);\n\n// Nasłuchiwanie zdarzenia DOMContentLoaded\ndocument.addEventListener('DOMContentLoaded', () => { \n    const buttonWatched = document.getElementById('btnWatched'); \n    const buttonQueue = document.getElementById('btnQueue'); \n    const galleryLibrary = document.querySelector('.gallery-library'); \n    \n    // Dodanie nasłuchiwania kliknięcia na przycisk \"Watched\"\n    buttonWatched.addEventListener('click', () => { \n        renderLibrary('movies-watched');\n    }); \n     \n    // Dodanie nasłuchiwania kliknięcia na przycisk \"Queue\"\n    buttonQueue.addEventListener('click', () => { \n        renderLibrary('movies-queue');\n    }); \n\n    // Funkcja renderująca bibliotekę filmów\n    async function renderLibrary(storageKey) { \n        const libraryData = JSON.parse(localStorage.getItem(storageKey)) || [];\n        \n        // Sprawdzenie czy dane istnieją i czy nie są puste\n        if (!libraryData || libraryData.length === 0) { \n            galleryLibrary.innerHTML = '<p>Brak filmów w bibliotece<p>'; \n            return;\n        } \n        \n       \n        try {\n            // Iteracja po ID filmów i pobranie ich szczegółów\n            for (const movieId of libraryData) {\n                const movieDetails = await fetchMovieDetails(movieId);\n                // Wygenerowanie markupu filmu i dodanie go do galerii\n                const movieMarkup = createMovieMarkup(movieDetails);\n                galleryLibrary.insertAdjacentHTML('beforeend', movieMarkup);\n            }\n        } catch (error) {\n            console.error('Error rendering library:', error);\n        }\n    }\n\n    // Funkcja pobierająca szczegóły filmu z API\n    async function fetchMovieDetails(movieId) {\n        try {\n            // Wykonanie zapytania do API \n            const response = await axios.get(`${BASE_URL}/movie/${movieId}?api_key=${API_KEY}&language=en-EN`);\n            return response.data;\n        } catch (error) {\n            console.error('Error fetching movie details:', error);\n            throw new Error('Failed to fetch movie details');\n        }\n    }\n\n    // Funkcja tworząca markup filmu\n    function createMovieMarkup(movieDetails) {\n        return `\n            <div class=\"movie\">\n                <h2>${movieDetails.title}</h2>\n                <p>${movieDetails.overview}</p>\n            </div>\n        `;\n    }\n});"],"names":["$parcel$global","globalThis","$parcel$modules","$parcel$inits","parcelRequire","id","exports","init","module","call","err","Error","code","register","$hGVxz","$441b9e87ca3cf489$var$watchedMovies","JSON","parse","localStorage","getItem","console","log","$441b9e87ca3cf489$var$watchedMovieIds","map","movie","idMatch","match","$441b9e87ca3cf489$var$queueMovies","$441b9e87ca3cf489$var$queueMovieIds","document","addEventListener","buttonWatched","getElementById","buttonQueue","galleryLibrary","querySelector","renderLibrary","storageKey","libraryData","length","innerHTML","movieId","movieDetails","movieMarkup","fetchMovieDetails","title","overview","insertAdjacentHTML","error","response","default","get","data"],"version":3,"file":"my-library.dfdfec5e.js.map"}