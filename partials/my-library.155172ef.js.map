{"mappings":"A,I,E,W,E,C,E,E,C,E,E,E,iB,A,O,I,A,C,E,S,C,E,G,K,E,O,C,C,E,C,O,C,G,K,E,C,I,E,C,C,E,A,Q,C,C,E,C,I,E,C,G,E,Q,C,C,E,O,C,C,E,C,E,E,I,C,E,O,C,E,E,O,E,E,O,A,C,I,E,A,M,uB,E,I,O,E,I,C,mB,C,C,E,Q,C,S,C,C,C,E,C,C,E,C,C,E,E,iB,C,G,E,Q,CE4CA,SAAS,gBAAgB,CAAC,mBAAoB,KAC1C,IAAM,EAAmB,SAAS,aAAa,CAAC,oBAC1C,EAAa,SAAS,cAAc,CAAC,cACrC,EAAW,SAAS,cAAc,CAAC,YAGrC,EAAgB,KAAK,KAAK,CAAC,aAAa,OAAO,CAAC,mBAAqB,EAAE,CACvE,EAAc,KAAK,KAAK,CAAC,aAAa,OAAO,CAAC,iBAAmB,EAAE,CAgBvE,SAAS,EAAc,CAAI,EACvB,EAAiB,SAAS,CAAG,EAAK,GAAG,CAAC,AAAA,GAb/B,CAAC;gDACgC,EAAE,AAYwB,EAZlB,EAAE,CAAC;kDACT,EAAE,AAWsB,EAXhB,WAAW,CAAC,OAAO,EAAE,AAWL,EAXW,KAAK,CAAC;;gDAE3C,EAAE,AASwB,EATlB,KAAK,CAAC;8CAChB,EAAE,AAQ0B,EARpB,YAAY,CAAC,KAAK,CAAC,EAAG,GAAG;;;iBAG9D,CAAC,EAKgE,IAAI,CAAC,GACnF,CAGA,EAAW,gBAAgB,CAAC,QAAS,KACjC,EAAc,EAClB,GAGA,EAAS,gBAAgB,CAAC,QAAS,KAC/B,EAAc,EAClB,GAGA,EAAiB,gBAAgB,CAAC,QAAS,AAAA,IACvC,IAAM,EAAS,EAAM,MAAM,CAC3B,GAAI,EAAO,SAAS,CAAC,QAAQ,CAAC,iBAAkB,CAC5C,IAAM,EAAU,EAAO,OAAO,CAAC,mBAAmB,OAAO,CAAC,EAAE,CAC5D,EAAgB,EAAc,MAAM,CAAC,AAAA,GAAS,EAAM,EAAE,GAAK,GAC3D,EAAc,EAAY,MAAM,CAAC,AAAA,GAAS,EAAM,EAAE,GAAK,GACvD,aAAa,OAAO,CAAC,gBAAiB,KAAK,SAAS,CAAC,IACrD,aAAa,OAAO,CAAC,cAAe,KAAK,SAAS,CAAC,IACnD,EAAc,EAAW,SAAS,CAAC,QAAQ,CAAC,UAAY,EAAgB,EAC5E,CACJ,GAEA,EAAc,EAClB,G,E,S,E,S,E,S,E,S,E,S,E,S,E,S,E","sources":["<anon>","src/js/my-library.js","src/js/headerLib.js"],"sourcesContent":["\n      var $parcel$global = globalThis;\n    \nvar $parcel$modules = {};\nvar $parcel$inits = {};\n\nvar parcelRequire = $parcel$global[\"parcelRequired7c6\"];\n\nif (parcelRequire == null) {\n  parcelRequire = function(id) {\n    if (id in $parcel$modules) {\n      return $parcel$modules[id].exports;\n    }\n    if (id in $parcel$inits) {\n      var init = $parcel$inits[id];\n      delete $parcel$inits[id];\n      var module = {id: id, exports: {}};\n      $parcel$modules[id] = module;\n      init.call(module.exports, module, module.exports);\n      return module.exports;\n    }\n    var err = new Error(\"Cannot find module '\" + id + \"'\");\n    err.code = 'MODULE_NOT_FOUND';\n    throw err;\n  };\n\n  parcelRequire.register = function register(id, init) {\n    $parcel$inits[id] = init;\n  };\n\n  $parcel$global[\"parcelRequired7c6\"] = parcelRequire;\n}\n\nvar parcelRegister = parcelRequire.register;\n\n// // Podpinamy się pod referencje\n// const btnWatched = document.getElementById('btnWatched');\n// const btnQueue = document.getElementById('btnQueue');\n// // Kontener na wyświetlenie wybranej biblioteki\n// const filmLibraryContainer = document.getElementById('filmLibraryContainer');\n// // Tworzymy dwie tablice na localStorage\n// let watchedFilms = JSON.parse(localStorage.getItem('watchedFilms')) || [];\n// let queueFilms = JSON.parse(localStorage.getItem('queueFilms')) || [];\n// // Funkcja dodawania filmów do odpowiedniej tablicy\n// function addFilmToLibrary(film, libraryKey) {\n//     const library = JSON.parse(localStorage.getItem(libraryKey)) || [];\n//     library.push(film);\n//     localStorage.setItem(libraryKey, JSON.stringify(library));\n// };\n// // Renderujemy filmy\n// function renderFilm(library) {\n//     filmLibraryContainer.innerHTML = '';\n//     library.forEach(film => {\n//         const filmElement = document.createElement('div');\n//         filmElement.classList.add('film');\n//         filmElement.textContent = film.title;\n//         filmLibraryContainer.appendChild(filmElement);\n//     });\n// }\n// btnWatched.addEventListener('click', () => {\n//     renderFilm(watchedFilms);\n// });\n// btnQueue.addEventListener('click', () => {\n//     renderFilm(queueFilms);\n// });\n// // Dodawanie przykładowego filmu\n// const exampleFilm = { title: 'test' };\n// addFilmToLibrary(exampleFilm, 'watchedFilms'); \ndocument.addEventListener(\"DOMContentLoaded\", ()=>{\n    const libraryContainer = document.querySelector(\".gallery-library\");\n    const btnWatched = document.getElementById(\"btnWatched\");\n    const btnQueue = document.getElementById(\"btnQueue\");\n    // Pobieranie danych z localStorage lub ustawianie domyślnych wartości\n    let watchedMovies = JSON.parse(localStorage.getItem(\"watchedMovies\")) || [];\n    let queueMovies = JSON.parse(localStorage.getItem(\"queueMovies\")) || [];\n    // Generuj markup\n    function generateFilmMarkup(movie) {\n        return `\n            <li class=\"home-film-item\" data-id=\"${movie.id}\">\n                <img class=\"home-film-image\" src=\"${movie.poster_path}\" alt=\"${movie.title}\">\n                <div class=\"home-film-details\">\n                    <h2 class=\"home-film-title\">${movie.title}</h2>\n                    <p class=\"home-film-info\">${movie.release_date.slice(0, 4)}</p>\n                </div>\n                <button class=\"remove-button\">Usu\\u{144}</button>\n            </li>`;\n    }\n    // Funkcja renderująca bibliotekę filmów\n    function renderLibrary(data) {\n        libraryContainer.innerHTML = data.map((movie)=>generateFilmMarkup(movie)).join(\"\");\n    }\n    // Obsługa przycisku \"WATCHED\"\n    btnWatched.addEventListener(\"click\", ()=>{\n        renderLibrary(watchedMovies);\n    });\n    // Obsługa przycisku \"QUEUE\"\n    btnQueue.addEventListener(\"click\", ()=>{\n        renderLibrary(queueMovies);\n    });\n    // Obsługa kliknięcia przycisków usuwania filmu\n    libraryContainer.addEventListener(\"click\", (event)=>{\n        const target = event.target;\n        if (target.classList.contains(\"remove-button\")) {\n            const movieId = target.closest(\".home-film-item\").dataset.id;\n            watchedMovies = watchedMovies.filter((movie)=>movie.id !== movieId);\n            queueMovies = queueMovies.filter((movie)=>movie.id !== movieId);\n            localStorage.setItem(\"watchedMovies\", JSON.stringify(watchedMovies));\n            localStorage.setItem(\"queueMovies\", JSON.stringify(queueMovies));\n            renderLibrary(btnWatched.classList.contains(\"active\") ? watchedMovies : queueMovies);\n        }\n    });\n    renderLibrary(watchedMovies);\n});\n\n\nparcelRequire(\"g1uI7\");\nparcelRequire(\"40lI0\");\nparcelRequire(\"bMpwc\");\nparcelRequire(\"7UJs8\");\nparcelRequire(\"kBG4Y\");\nparcelRequire(\"4boOf\");\nparcelRequire(\"2AKVI\");\nparcelRequire(\"46SdE\");\n\n\n//# sourceMappingURL=my-library.155172ef.js.map\n","import '../css/main.css';\n\nimport './headerLib.js';\nimport './pagination.js';\nimport './modal.js';\nimport './modalButtons.js';\nimport './modal-team.js';\nimport './logWindow.js';\nimport './mobileMenu.js';\n\nimport { initializeApp } from 'firebase/app';\nimport { getAuth } from 'firebase/auth';\n","\n// // Podpinamy się pod referencje\n// const btnWatched = document.getElementById('btnWatched');\n// const btnQueue = document.getElementById('btnQueue');\n\n// // Kontener na wyświetlenie wybranej biblioteki\n// const filmLibraryContainer = document.getElementById('filmLibraryContainer');\n\n// // Tworzymy dwie tablice na localStorage\n// let watchedFilms = JSON.parse(localStorage.getItem('watchedFilms')) || [];\n// let queueFilms = JSON.parse(localStorage.getItem('queueFilms')) || [];\n\n// // Funkcja dodawania filmów do odpowiedniej tablicy\n// function addFilmToLibrary(film, libraryKey) {\n//     const library = JSON.parse(localStorage.getItem(libraryKey)) || [];\n//     library.push(film);\n//     localStorage.setItem(libraryKey, JSON.stringify(library));\n// };\n\n// // Renderujemy filmy\n// function renderFilm(library) {\n//     filmLibraryContainer.innerHTML = '';\n\n//     library.forEach(film => {\n//         const filmElement = document.createElement('div');\n//         filmElement.classList.add('film');\n//         filmElement.textContent = film.title;\n//         filmLibraryContainer.appendChild(filmElement);\n//     });\n// }\n\n// btnWatched.addEventListener('click', () => {\n//     renderFilm(watchedFilms);\n// });\n\n// btnQueue.addEventListener('click', () => {\n//     renderFilm(queueFilms);\n// });\n\n// // Dodawanie przykładowego filmu\n// const exampleFilm = { title: 'test' };\n// addFilmToLibrary(exampleFilm, 'watchedFilms'); \n \n\ndocument.addEventListener('DOMContentLoaded', () => {\n    const libraryContainer = document.querySelector('.gallery-library');\n    const btnWatched = document.getElementById('btnWatched');\n    const btnQueue = document.getElementById('btnQueue');\n\n    // Pobieranie danych z localStorage lub ustawianie domyślnych wartości\n    let watchedMovies = JSON.parse(localStorage.getItem('watchedMovies')) || [];\n    let queueMovies = JSON.parse(localStorage.getItem('queueMovies')) || [];\n\n    // Generuj markup\n    function generateFilmMarkup(movie) {\n        return `\n            <li class=\"home-film-item\" data-id=\"${movie.id}\">\n                <img class=\"home-film-image\" src=\"${movie.poster_path}\" alt=\"${movie.title}\">\n                <div class=\"home-film-details\">\n                    <h2 class=\"home-film-title\">${movie.title}</h2>\n                    <p class=\"home-film-info\">${movie.release_date.slice(0, 4)}</p>\n                </div>\n                <button class=\"remove-button\">Usuń</button>\n            </li>`;\n    }\n\n    // Funkcja renderująca bibliotekę filmów\n    function renderLibrary(data) {\n        libraryContainer.innerHTML = data.map(movie => generateFilmMarkup(movie)).join('');\n    }\n\n    // Obsługa przycisku \"WATCHED\"\n    btnWatched.addEventListener('click', () => {\n        renderLibrary(watchedMovies);\n    });\n\n    // Obsługa przycisku \"QUEUE\"\n    btnQueue.addEventListener('click', () => {\n        renderLibrary(queueMovies);\n    });\n\n    // Obsługa kliknięcia przycisków usuwania filmu\n    libraryContainer.addEventListener('click', event => {\n        const target = event.target;\n        if (target.classList.contains('remove-button')) {\n            const movieId = target.closest('.home-film-item').dataset.id;\n            watchedMovies = watchedMovies.filter(movie => movie.id !== movieId);\n            queueMovies = queueMovies.filter(movie => movie.id !== movieId);\n            localStorage.setItem('watchedMovies', JSON.stringify(watchedMovies));\n            localStorage.setItem('queueMovies', JSON.stringify(queueMovies));\n            renderLibrary(btnWatched.classList.contains('active') ? watchedMovies : queueMovies);\n        }\n    });\n\n    renderLibrary(watchedMovies);\n});"],"names":["$parcel$global","globalThis","$parcel$modules","$parcel$inits","parcelRequire","id","exports","init","module","call","err","Error","code","register","document","addEventListener","libraryContainer","querySelector","btnWatched","getElementById","btnQueue","watchedMovies","JSON","parse","localStorage","getItem","queueMovies","renderLibrary","data","innerHTML","map","movie","poster_path","title","release_date","slice","join","event","target","classList","contains","movieId","closest","dataset","filter","setItem","stringify"],"version":3,"file":"my-library.155172ef.js.map"}