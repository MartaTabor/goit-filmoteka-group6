{"mappings":"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","sources":["<anon>","src/js/my-library.js","src/js/headerLib.js"],"sourcesContent":["\n      var $parcel$global = globalThis;\n    \nvar $parcel$modules = {};\nvar $parcel$inits = {};\n\nvar parcelRequire = $parcel$global[\"parcelRequired7c6\"];\n\nif (parcelRequire == null) {\n  parcelRequire = function(id) {\n    if (id in $parcel$modules) {\n      return $parcel$modules[id].exports;\n    }\n    if (id in $parcel$inits) {\n      var init = $parcel$inits[id];\n      delete $parcel$inits[id];\n      var module = {id: id, exports: {}};\n      $parcel$modules[id] = module;\n      init.call(module.exports, module, module.exports);\n      return module.exports;\n    }\n    var err = new Error(\"Cannot find module '\" + id + \"'\");\n    err.code = 'MODULE_NOT_FOUND';\n    throw err;\n  };\n\n  parcelRequire.register = function register(id, init) {\n    $parcel$inits[id] = init;\n  };\n\n  $parcel$global[\"parcelRequired7c6\"] = parcelRequire;\n}\n\nvar parcelRegister = parcelRequire.register;\n\n// 'use strict';\n// // Pobranie danych z localStorage dla klucza 'movies-watched'\n// const watchedMovies = JSON.parse(localStorage.getItem('movies-watched')) || [];\n// console.log('Watched Movies:');\n// console.log(watchedMovies);\n// // Pobranie danych z localStorage dla klucza 'movies-queue'\n// const queueMovies = JSON.parse(localStorage.getItem('movies-queue')) || [];\n// console.log('Queue Movies:');\n// console.log(queueMovies);\n// // Funkcja renderująca bibliotekę filmów\n// function renderLibrary(libraryData) {\n//   const galleryLibrary = document.querySelector('.gallery-library');\n//   // Wyczyszczenie zawartości galerii przed dodaniem nowych elementów\n//   galleryLibrary.innerHTML = '';\n//   // Sprawdzenie czy dane istnieją i czy nie są puste\n//   if (!libraryData || libraryData.length === 0) {\n//     galleryLibrary.innerHTML = `\n//           <div class=\"empty-library\">\n//               <p>Brak filmów w bibliotece</p>\n//               <div class=\"lCatson\"></div>\n//           </div>`;\n//     return;\n//   }\n//   // Iteracja po filmach z localStorage\n//   libraryData.forEach(movie => {\n//     // Wygenerowanie markupu filmu i dodanie go do galerii\n//     const movieMarkup = createMovieMarkup(movie);\n//     galleryLibrary.insertAdjacentHTML('beforeend', movieMarkup);\n//   });\n// }\n// // Funkcja tworząca markup filmu\n// function createMovieMarkup(movie) {\n//   return `\n//         <li class=\"library-film-item\" data-modal-open>\n//           <img class=\"library-film-image\" src=\"https://image.tmdb.org/t/p/original/${\n//             movie.poster_path\n//           }\" alt=\"${movie.title}\">\n//           <div class=\"library-film-details\">\n//             <h2 class=\"library-film-title\">${movie.title}</h2>\n//             <p class=\"library-film-info\">\n//               <span class=\"library-film-year\">${movie.release_date.slice(0, 4)}</span>\n//               <span class=\"library-film-rating\">${movie.vote_average.toFixed(1)}</span>\n//             </p>\n//           </div>\n//         </li>`;\n// }\n// // Funkcja wywołująca renderowanie biblioteki filmów po załadowaniu strony\n// function loadLibraryOnPageLoad() {\n//     // Wywołanie funkcji renderLibrary z danymi o filmach do obejrzenia\n//     renderLibrary(watchedMovies);\n//     // Symulowanie fizycznego kliknięcia na przycisku \"Watched\" przy pierwszym uruchomieniu strony\n//     const buttonWatched = document.getElementById('btnWatched');\n//     const clickEvent = new MouseEvent('click', {\n//         bubbles: true,\n//         cancelable: true,\n//         view: window\n//     });\n//     buttonWatched.dispatchEvent(clickEvent);\n// }\n// // Nasłuchiwanie zdarzenia DOMContentLoaded\n// document.addEventListener('DOMContentLoaded', () => {\n//     const buttonWatched = document.getElementById('btnWatched');\n//     const buttonQueue = document.getElementById('btnQueue');\n//     // Dodanie nasłuchiwania kliknięcia na przycisk \"Watched\"\n//     buttonWatched.addEventListener('click', () => {\n//         renderLibrary(watchedMovies);\n//         buttonWatched.classList.add('isActive'); // Dodanie klasy CSS 'active' dla podświetlenia\n//         buttonQueue.classList.remove('isActive'); // Usunięcie klasy CSS 'active' z drugiego przycisku\n//     });\n//     // Dodanie nasłuchiwania kliknięcia na przycisk \"Queue\"\n//     buttonQueue.addEventListener('click', () => {\n//         renderLibrary(queueMovies);\n//         buttonQueue.classList.add('isActive'); // Dodanie klasy CSS 'active' dla podświetlenia\n//         buttonWatched.classList.remove('isActive'); // Usunięcie klasy CSS 'active' z pierwszego przycisku\n//     });\n//     // Wywołanie funkcji renderującej bibliotekę filmów po załadowaniu strony\n//     loadLibraryOnPageLoad();\n// });\n// -----------------------------------próba wyszukania filmu po id------------------------------\n\nvar $hGVxz = parcelRequire(\"hGVxz\");\n\"use strict\";\nlet $441b9e87ca3cf489$var$currentFilmIndex = 0;\nconst $441b9e87ca3cf489$var$loader = document.querySelector(\".loader-container\");\n// Funkcja wyszukująca filmy na podstawie listy identyfikatorów\nasync function $441b9e87ca3cf489$var$fetchFilmsByIds(movieIds) {\n    const options = {\n        method: \"GET\",\n        url: \"https://api.themoviedb.org/3/movie\",\n        params: {\n            api_key: \"5abbb3dbf9a78bf33887465dc33dbfa3\",\n            language: \"en-US\",\n            append_to_response: \"credits\"\n        },\n        headers: {\n            accept: \"application/json\"\n        }\n    };\n    $441b9e87ca3cf489$var$loader.classList.remove(\"visually-hidden\");\n    // Mapowanie listy identyfikatorów na listę zapytań do API\n    const requests = movieIds.map((movieId)=>(0, $hGVxz.default).request({\n            ...options,\n            url: `${options.url}/${movieId}`\n        }));\n    // Wykonaj równoległe zapytania do API dla każdego identyfikatora filmu\n    const responses = await Promise.all(requests);\n    return responses.map((response)=>response.data);\n}\n// Funkcja renderująca bibliotekę filmów\nfunction $441b9e87ca3cf489$var$renderLibrary(libraryData) {\n    const galleryLibrary = document.querySelector(\".gallery-library\");\n    $441b9e87ca3cf489$var$loader.classList.add(\"visually-hidden\");\n    // Wyczyszczenie zawartości galerii przed dodaniem nowych elementów\n    galleryLibrary.innerHTML = \"\";\n    // Sprawdzenie czy dane istnieją i czy nie są puste\n    if (!libraryData || libraryData.length === 0) {\n        galleryLibrary.innerHTML = `\n          <div class=\"empty-library\">\n              <p>Brak film\\xf3w w bibliotece</p>\n              <div class=\"lCatson\"></div>\n          </div>`;\n        return;\n    }\n    // Iteracja po filmach z danych z API\n    libraryData.forEach((movie)=>{\n        // Wygenerowanie markupu filmu i dodanie go do galerii\n        const movieMarkup = $441b9e87ca3cf489$var$createMovieMarkup(movie);\n        galleryLibrary.insertAdjacentHTML(\"beforeend\", movieMarkup);\n    });\n}\n// Funkcja tworząca markup filmu\nfunction $441b9e87ca3cf489$var$createMovieMarkup(movie) {\n    // Tworzenie markupu dla gatunków filmowych\n    const genresMarkup = movie.genres.map((genre)=>`<span class=\"home-film-genre\">${genre.name}</span>`).join(\" | \");\n    // Tworzenie markupu dla pojedynczego filmu\n    return `\n        <li class=\"home-film-item\" data-index=\"${movie.id}\" data-modal-open>\n          <img class=\"home-film-image\" src=\"https://image.tmdb.org/t/p/original/${movie.poster_path}\" alt=\"${movie.title}\">\n          <div class=\"home-film-details\">\n            <h2 class=\"home-film-title\">${movie.title}</h2>\n            <p class=\"home-film-info\">\n              <span class=\"home-film-genres\">${genresMarkup}</span> |\n              <span class=\"home-film-year\">${movie.release_date.slice(0, 4)}</span>\n              <span class=\"home-film-rating\">${movie.vote_average.toFixed(1)}</span>\n            </p>\n          </div>\n        </li>`;\n}\n// Funkcja wywołująca renderowanie biblioteki filmów\nasync function $441b9e87ca3cf489$var$loadLibraryOnPageLoad() {\n    const buttonWatched = document.getElementById(\"btnWatched\");\n    const buttonQueue = document.getElementById(\"btnQueue\");\n    try {\n        // Pobranie filmów obejrzanych z localStorage\n        const watchedMovies = JSON.parse(localStorage.getItem(\"movies-watched\")) || [];\n        // Pobranie filmów w kolejce z localStorage\n        const queueMovies = JSON.parse(localStorage.getItem(\"movies-queue\")) || [];\n        // Wybór, która biblioteka ma być wyświetlana na starcie\n        if (buttonWatched.classList.contains(\"isActive\")) {\n            // Pobranie danych o filmach z API na podstawie identyfikatorów obejrzanych filmów\n            const watchedMoviesData = await $441b9e87ca3cf489$var$fetchFilmsByIds(watchedMovies.map((movie)=>movie.id));\n            // Renderowanie biblioteki filmów obejrzanych\n            $441b9e87ca3cf489$var$renderLibrary(watchedMoviesData);\n        } else if (buttonQueue.classList.contains(\"isActive\")) {\n            // Pobranie danych o filmach z API na podstawie identyfikatorów filmów w kolejce\n            const queueMoviesData = await $441b9e87ca3cf489$var$fetchFilmsByIds(queueMovies.map((movie)=>movie.id));\n            // Renderowanie biblioteki filmów w kolejce\n            $441b9e87ca3cf489$var$renderLibrary(queueMoviesData);\n        } else {\n            // Domyślnie wyświetla bibliotekę obejrzanych filmów\n            const watchedMoviesData = await $441b9e87ca3cf489$var$fetchFilmsByIds(watchedMovies.map((movie)=>movie.id));\n            $441b9e87ca3cf489$var$renderLibrary(watchedMoviesData);\n            buttonWatched.classList.add(\"isActive\");\n        }\n    } catch (error) {\n        console.error(\"Error rendering library:\", error);\n    }\n    // Obsługa przycisku \"Watched\"\n    buttonWatched.addEventListener(\"click\", async ()=>{\n        try {\n            const watchedMovies = JSON.parse(localStorage.getItem(\"movies-watched\")) || [];\n            const watchedMoviesData = await $441b9e87ca3cf489$var$fetchFilmsByIds(watchedMovies.map((movie)=>movie.id));\n            $441b9e87ca3cf489$var$renderLibrary(watchedMoviesData);\n            buttonWatched.classList.add(\"isActive\");\n            buttonQueue.classList.remove(\"isActive\");\n        } catch (error) {\n            console.error(\"Error rendering watched library:\", error);\n        }\n    });\n    // Obsługa przycisku \"Queue\"\n    buttonQueue.addEventListener(\"click\", async ()=>{\n        try {\n            const queueMovies = JSON.parse(localStorage.getItem(\"movies-queue\")) || [];\n            const queueMoviesData = await $441b9e87ca3cf489$var$fetchFilmsByIds(queueMovies.map((movie)=>movie.id));\n            $441b9e87ca3cf489$var$renderLibrary(queueMoviesData);\n            buttonQueue.classList.add(\"isActive\");\n            buttonWatched.classList.remove(\"isActive\");\n        } catch (error) {\n            console.error(\"Error rendering queue library:\", error);\n        }\n    });\n}\n// Nasłuchiwanie zdarzenia DOMContentLoaded\ndocument.addEventListener(\"DOMContentLoaded\", $441b9e87ca3cf489$var$loadLibraryOnPageLoad);\n\n\nparcelRequire(\"40lI0\");\nparcelRequire(\"bMpwc\");\nparcelRequire(\"7UJs8\");\nparcelRequire(\"kBG4Y\");\nparcelRequire(\"4boOf\");\nparcelRequire(\"hHD3f\");\nparcelRequire(\"3HnU4\");\nparcelRequire(\"2AKVI\");\nparcelRequire(\"46SdE\");\n\n\n//# sourceMappingURL=my-library.28b47773.js.map\n","import '../css/main.css';\n\nimport './headerLib.js';\n// import './pagination.js';\nimport './modal.js';\nimport './modalButtons.js';\nimport './modal-team.js';\nimport './logWindow.js';\nimport './mobileMenu.js';\nimport './darkMode.js';\n// import './js/header-home.js';\nimport './to-top.js';\n\nimport { initializeApp } from 'firebase/app';\nimport { getAuth } from 'firebase/auth';\n","// 'use strict';\n\n// // Pobranie danych z localStorage dla klucza 'movies-watched'\n// const watchedMovies = JSON.parse(localStorage.getItem('movies-watched')) || [];\n// console.log('Watched Movies:');\n// console.log(watchedMovies);\n\n// // Pobranie danych z localStorage dla klucza 'movies-queue'\n// const queueMovies = JSON.parse(localStorage.getItem('movies-queue')) || [];\n// console.log('Queue Movies:');\n// console.log(queueMovies);\n\n// // Funkcja renderująca bibliotekę filmów\n// function renderLibrary(libraryData) {\n//   const galleryLibrary = document.querySelector('.gallery-library');\n\n//   // Wyczyszczenie zawartości galerii przed dodaniem nowych elementów\n//   galleryLibrary.innerHTML = '';\n\n//   // Sprawdzenie czy dane istnieją i czy nie są puste\n//   if (!libraryData || libraryData.length === 0) {\n//     galleryLibrary.innerHTML = `\n//           <div class=\"empty-library\">\n//               <p>Brak filmów w bibliotece</p>\n//               <div class=\"lCatson\"></div>\n//           </div>`;\n//     return;\n//   }\n\n//   // Iteracja po filmach z localStorage\n//   libraryData.forEach(movie => {\n//     // Wygenerowanie markupu filmu i dodanie go do galerii\n//     const movieMarkup = createMovieMarkup(movie);\n//     galleryLibrary.insertAdjacentHTML('beforeend', movieMarkup);\n//   });\n// }\n\n// // Funkcja tworząca markup filmu\n// function createMovieMarkup(movie) {\n//   return `\n//         <li class=\"library-film-item\" data-modal-open>\n//           <img class=\"library-film-image\" src=\"https://image.tmdb.org/t/p/original/${\n//             movie.poster_path\n//           }\" alt=\"${movie.title}\">\n//           <div class=\"library-film-details\">\n//             <h2 class=\"library-film-title\">${movie.title}</h2>\n//             <p class=\"library-film-info\">\n//               <span class=\"library-film-year\">${movie.release_date.slice(0, 4)}</span>\n//               <span class=\"library-film-rating\">${movie.vote_average.toFixed(1)}</span>\n//             </p>\n//           </div>\n//         </li>`;\n// }\n\n// // Funkcja wywołująca renderowanie biblioteki filmów po załadowaniu strony\n// function loadLibraryOnPageLoad() {\n\n//     // Wywołanie funkcji renderLibrary z danymi o filmach do obejrzenia\n//     renderLibrary(watchedMovies);\n\n//     // Symulowanie fizycznego kliknięcia na przycisku \"Watched\" przy pierwszym uruchomieniu strony\n//     const buttonWatched = document.getElementById('btnWatched');\n//     const clickEvent = new MouseEvent('click', {\n//         bubbles: true,\n//         cancelable: true,\n//         view: window\n//     });\n//     buttonWatched.dispatchEvent(clickEvent);\n// }\n\n// // Nasłuchiwanie zdarzenia DOMContentLoaded\n// document.addEventListener('DOMContentLoaded', () => {\n//     const buttonWatched = document.getElementById('btnWatched');\n//     const buttonQueue = document.getElementById('btnQueue');\n\n//     // Dodanie nasłuchiwania kliknięcia na przycisk \"Watched\"\n//     buttonWatched.addEventListener('click', () => {\n//         renderLibrary(watchedMovies);\n//         buttonWatched.classList.add('isActive'); // Dodanie klasy CSS 'active' dla podświetlenia\n//         buttonQueue.classList.remove('isActive'); // Usunięcie klasy CSS 'active' z drugiego przycisku\n//     });\n\n//     // Dodanie nasłuchiwania kliknięcia na przycisk \"Queue\"\n//     buttonQueue.addEventListener('click', () => {\n//         renderLibrary(queueMovies);\n//         buttonQueue.classList.add('isActive'); // Dodanie klasy CSS 'active' dla podświetlenia\n//         buttonWatched.classList.remove('isActive'); // Usunięcie klasy CSS 'active' z pierwszego przycisku\n//     });\n\n//     // Wywołanie funkcji renderującej bibliotekę filmów po załadowaniu strony\n//     loadLibraryOnPageLoad();\n// });\n\n// -----------------------------------próba wyszukania filmu po id------------------------------\n\n'use strict';\n\nimport axios from 'axios';\n\nlet currentFilmIndex = 0;\nconst loader = document.querySelector('.loader-container');\n\n// Funkcja wyszukująca filmy na podstawie listy identyfikatorów\nasync function fetchFilmsByIds(movieIds) {\n  const options = {\n    method: 'GET',\n    url: 'https://api.themoviedb.org/3/movie',\n    params: {\n      api_key: '5abbb3dbf9a78bf33887465dc33dbfa3', // Dodaj swój klucz API\n      language: 'en-US',\n      append_to_response: 'credits', // Jeśli chcesz pobierać również informacje o obsadzie, możesz to tutaj zdefiniować\n    },\n    headers: {\n      accept: 'application/json',\n    },\n  };\n  loader.classList.remove('visually-hidden');\n\n  // Mapowanie listy identyfikatorów na listę zapytań do API\n  const requests = movieIds.map(movieId =>\n    axios.request({\n      ...options,\n      url: `${options.url}/${movieId}`, // Dodaj identyfikator filmu do URL-a\n    }),\n  );\n\n  // Wykonaj równoległe zapytania do API dla każdego identyfikatora filmu\n  const responses = await Promise.all(requests);\n\n  return responses.map(response => response.data);\n}\n\n// Funkcja renderująca bibliotekę filmów\nfunction renderLibrary(libraryData) {\n  const galleryLibrary = document.querySelector('.gallery-library');\n  loader.classList.add('visually-hidden');\n  // Wyczyszczenie zawartości galerii przed dodaniem nowych elementów\n  galleryLibrary.innerHTML = '';\n\n  // Sprawdzenie czy dane istnieją i czy nie są puste\n  if (!libraryData || libraryData.length === 0) {\n    galleryLibrary.innerHTML = `\n          <div class=\"empty-library\">\n              <p>Brak filmów w bibliotece</p>\n              <div class=\"lCatson\"></div>\n          </div>`;\n    return;\n  }\n\n  // Iteracja po filmach z danych z API\n  libraryData.forEach(movie => {\n    // Wygenerowanie markupu filmu i dodanie go do galerii\n    const movieMarkup = createMovieMarkup(movie);\n    galleryLibrary.insertAdjacentHTML('beforeend', movieMarkup);\n  });\n}\n\n// Funkcja tworząca markup filmu\nfunction createMovieMarkup(movie) {\n  // Tworzenie markupu dla gatunków filmowych\n  const genresMarkup = movie.genres\n    .map(genre => `<span class=\"home-film-genre\">${genre.name}</span>`)\n    .join(' | ');\n\n  // Tworzenie markupu dla pojedynczego filmu\n  return `\n        <li class=\"home-film-item\" data-index=\"${movie.id}\" data-modal-open>\n          <img class=\"home-film-image\" src=\"https://image.tmdb.org/t/p/original/${\n            movie.poster_path\n          }\" alt=\"${movie.title}\">\n          <div class=\"home-film-details\">\n            <h2 class=\"home-film-title\">${movie.title}</h2>\n            <p class=\"home-film-info\">\n              <span class=\"home-film-genres\">${genresMarkup}</span> |\n              <span class=\"home-film-year\">${movie.release_date.slice(0, 4)}</span>\n              <span class=\"home-film-rating\">${movie.vote_average.toFixed(1)}</span>\n            </p>\n          </div>\n        </li>`;\n}\n\n// Funkcja wywołująca renderowanie biblioteki filmów\nasync function loadLibraryOnPageLoad() {\n  const buttonWatched = document.getElementById('btnWatched');\n  const buttonQueue = document.getElementById('btnQueue');\n\n  try {\n    // Pobranie filmów obejrzanych z localStorage\n    const watchedMovies = JSON.parse(localStorage.getItem('movies-watched')) || [];\n    // Pobranie filmów w kolejce z localStorage\n    const queueMovies = JSON.parse(localStorage.getItem('movies-queue')) || [];\n\n    // Wybór, która biblioteka ma być wyświetlana na starcie\n    if (buttonWatched.classList.contains('isActive')) {\n      // Pobranie danych o filmach z API na podstawie identyfikatorów obejrzanych filmów\n      const watchedMoviesData = await fetchFilmsByIds(watchedMovies.map(movie => movie.id));\n      // Renderowanie biblioteki filmów obejrzanych\n      renderLibrary(watchedMoviesData);\n    } else if (buttonQueue.classList.contains('isActive')) {\n      // Pobranie danych o filmach z API na podstawie identyfikatorów filmów w kolejce\n      const queueMoviesData = await fetchFilmsByIds(queueMovies.map(movie => movie.id));\n      // Renderowanie biblioteki filmów w kolejce\n      renderLibrary(queueMoviesData);\n    } else {\n      // Domyślnie wyświetla bibliotekę obejrzanych filmów\n      const watchedMoviesData = await fetchFilmsByIds(watchedMovies.map(movie => movie.id));\n      renderLibrary(watchedMoviesData);\n      buttonWatched.classList.add('isActive');\n    }\n  } catch (error) {\n    console.error('Error rendering library:', error);\n  }\n\n  // Obsługa przycisku \"Watched\"\n  buttonWatched.addEventListener('click', async () => {\n    try {\n      const watchedMovies = JSON.parse(localStorage.getItem('movies-watched')) || [];\n      const watchedMoviesData = await fetchFilmsByIds(watchedMovies.map(movie => movie.id));\n      renderLibrary(watchedMoviesData);\n      buttonWatched.classList.add('isActive');\n      buttonQueue.classList.remove('isActive');\n    } catch (error) {\n      console.error('Error rendering watched library:', error);\n    }\n  });\n\n  // Obsługa przycisku \"Queue\"\n  buttonQueue.addEventListener('click', async () => {\n    try {\n      const queueMovies = JSON.parse(localStorage.getItem('movies-queue')) || [];\n      const queueMoviesData = await fetchFilmsByIds(queueMovies.map(movie => movie.id));\n      renderLibrary(queueMoviesData);\n      buttonQueue.classList.add('isActive');\n      buttonWatched.classList.remove('isActive');\n    } catch (error) {\n      console.error('Error rendering queue library:', error);\n    }\n  });\n}\n\n// Nasłuchiwanie zdarzenia DOMContentLoaded\ndocument.addEventListener('DOMContentLoaded', loadLibraryOnPageLoad);\n"],"names":["$parcel$global","globalThis","$parcel$modules","$parcel$inits","parcelRequire","id","exports","init","module","call","err","Error","code","register","$hGVxz","$441b9e87ca3cf489$var$loader","document","querySelector","$441b9e87ca3cf489$var$fetchFilmsByIds","movieIds","options","method","url","params","api_key","language","append_to_response","headers","accept","classList","remove","requests","map","movieId","default","request","responses","Promise","all","response","data","$441b9e87ca3cf489$var$renderLibrary","libraryData","galleryLibrary","add","innerHTML","length","forEach","movie","movieMarkup","$441b9e87ca3cf489$var$createMovieMarkup","genresMarkup","genres","genre","name","join","poster_path","title","release_date","slice","vote_average","toFixed","insertAdjacentHTML","$441b9e87ca3cf489$var$loadLibraryOnPageLoad","buttonWatched","getElementById","buttonQueue","watchedMovies","JSON","parse","localStorage","getItem","queueMovies","contains","watchedMoviesData","queueMoviesData","error","console","addEventListener"],"version":3,"file":"my-library.28b47773.js.map"}