{"mappings":"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","sources":["<anon>","src/index.js","src/js/fetchFilms.js","src/js/showFilms.js","src/js/pagination.js","src/js/popularFilms.js","src/js/to-top.js"],"sourcesContent":["\nfunction $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\n\n      var $parcel$global = globalThis;\n    \nvar $parcel$modules = {};\nvar $parcel$inits = {};\n\nvar parcelRequire = $parcel$global[\"parcelRequired7c6\"];\n\nif (parcelRequire == null) {\n  parcelRequire = function(id) {\n    if (id in $parcel$modules) {\n      return $parcel$modules[id].exports;\n    }\n    if (id in $parcel$inits) {\n      var init = $parcel$inits[id];\n      delete $parcel$inits[id];\n      var module = {id: id, exports: {}};\n      $parcel$modules[id] = module;\n      init.call(module.exports, module, module.exports);\n      return module.exports;\n    }\n    var err = new Error(\"Cannot find module '\" + id + \"'\");\n    err.code = 'MODULE_NOT_FOUND';\n    throw err;\n  };\n\n  parcelRequire.register = function register(id, init) {\n    $parcel$inits[id] = init;\n  };\n\n  $parcel$global[\"parcelRequired7c6\"] = parcelRequire;\n}\n\nvar parcelRegister = parcelRequire.register;\n\n// axios\n\nvar $hGVxz = parcelRequire(\"hGVxz\");\n\nvar $lzX4I = parcelRequire(\"lzX4I\");\n\nvar $hGVxz = parcelRequire(\"hGVxz\");\n// import { showFilms } from \"./showFilms\";\nasync function $5ee1102b07bd66cf$var$getGenres() {\n    return (0, $hGVxz.default).get(`https://api.themoviedb.org/3/genre/movie/list?api_key=c2f18aa0c4ee94c87f87834077fd721a&language=en-EN`);\n}\nasync function $5ee1102b07bd66cf$export$d4aff629fc562466(res) {\n    const loader = document.querySelector(\".loader-container\");\n    const filmList = document.querySelector(\".home-film-list\");\n    let currentFilmIndex = 0;\n    const movies = res.data.results;\n    loader.classList.remove(\"visually-hidden\");\n    // Pobieranie gatunków filmowych\n    let src_img;\n    const genresResponse = await $5ee1102b07bd66cf$var$getGenres();\n    const genresMap = {};\n    genresResponse.data.genres.forEach((genre)=>{\n        genresMap[genre.id] = genre.name;\n    });\n    // Tworzenie markupu dla każdego filmu\n    const markupArray = movies.map((movie)=>{\n        const genreNames = movie.genre_ids.map((genreId)=>genresMap[genreId]).slice(0, 2);\n        const genresMarkup = genreNames.join(\", \");\n        if (movie.poster_path != null) src_img = `https://image.tmdb.org/t/p/original/${movie.poster_path}`;\n        else src_img = \"../image/noImage.jpg\";\n        return `\n        <li class=\"home-film-item\" data-index=\"${currentFilmIndex++}\" data-modal-open>\n          <img class=\"home-film-image\" src=\"${src_img}\" alt=\"${movie.title}\">\n          <div class=\"home-film-details\">\n            <h2 class=\"home-film-title\">${movie.title}</h2>\n            <p class=\"home-film-info\">\n              <span class=\"home-film-type\">${genresMarkup}</span> |\n              <span class=\"home-film-year\">${movie.release_date.slice(0, 4)}</span>\n              <span class=\"home-film-rating\">${movie.vote_average.toFixed(1)}</span>\n            </p>\n          </div>\n        </li>`;\n    });\n    loader.classList.add(\"visually-hidden\");\n    // Wstawianie wygenerowanego markupu do elementu HTML      \n    filmList.innerHTML = markupArray.join(\"\");\n}\n\n\nconst $9a7554dd658d5eed$var$searchForm = document.querySelector(\"#search-form\");\nconst $9a7554dd658d5eed$var$errorText = document.querySelector(\".errorText\");\nasync function $9a7554dd658d5eed$export$9032d802dd688362(qwery, page) {\n    const options = {\n        method: \"GET\",\n        url: \"https://api.themoviedb.org/3/search/movie\",\n        params: {\n            query: `${qwery}`,\n            include_adult: \"false\",\n            language: \"en-US\",\n            page: `${page}`\n        },\n        headers: {\n            accept: \"application/json\",\n            Authorization: \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwNjRiYzVmYTA0ZTcwZWUwNmI1YmZjZmZkZDAwMjhmZiIsInN1YiI6IjY1ZjFiYzIwZDY0YWMyMDBjYTVkMWU2YSIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.kSA66Srxuh9huCM-91QWv-1PAFYBxqjt-fFzzJb4bmg\"\n        }\n    };\n    const res = await (0, $hGVxz.default).request(options);\n    return res;\n}\n$9a7554dd658d5eed$var$searchForm.addEventListener(\"submit\", (evt)=>{\n    evt.preventDefault();\n    if ($9a7554dd658d5eed$var$searchForm.elements.searchQuery.value.trim() == \"\") (0, (/*@__PURE__*/$parcel$interopDefault($lzX4I))).Notify.warning(\"Enter some text...\");\n    else $9a7554dd658d5eed$export$9032d802dd688362($9a7554dd658d5eed$var$searchForm.elements.searchQuery.value.trim().split(\" \").join(`%20`), 1).then((res)=>{\n        if (res.data.total_results == 0) $9a7554dd658d5eed$var$errorText.classList.remove(\"hiddenVisibility\");\n        else {\n            $9a7554dd658d5eed$var$errorText.classList.add(\"hiddenVisibility\");\n            (0, (/*@__PURE__*/$parcel$interopDefault($lzX4I))).Notify.success(`Znaeziono: ${res.data.total_results}`);\n            (0, $5ee1102b07bd66cf$export$d4aff629fc562466)(res);\n        }\n    }).catch((error)=>{});\n});\n\n\nparcelRequire(\"kBG4Y\");\nparcelRequire(\"4boOf\");\nparcelRequire(\"40lI0\");\nparcelRequire(\"bMpwc\");\n\nvar $hGVxz = parcelRequire(\"hGVxz\");\n\n// const axios = require(\"axios\");\nconst $350f07e7923c52b5$var$filmList = document.querySelector(\".home-film-list\");\nconst $350f07e7923c52b5$var$loader = document.querySelector(\".loader-container\");\n// export async function getGenres() {\n//     return axios.get(\n//       `https://api.themoviedb.org/3/genre/movie/list?api_key=c2f18aa0c4ee94c87f87834077fd721a&language=en-EN`,\n//     );\n// }\n// export async function showFilms(res) {\n//     const loader = document.querySelector('.loader-container');\n//     const filmList = document.querySelector('.home-film-list');\n//   let currentFilmIndex = 0;\n//   const movies = res.data.results;\n//   loader.classList.remove('visually-hidden');\n//   // Pobieranie gatunków filmowych\n// let src_img\n//   const genresResponse = await getGenres();\n//     const genresMap = {};\n//     genresResponse.data.genres.forEach(genre => {\n//       genresMap[genre.id] = genre.name;\n//     });\n//     // Tworzenie markupu dla każdego filmu\n//     const markupArray = movies.map(movie => {\n//       const genreNames = movie.genre_ids.map(genreId => genresMap[genreId]).slice(0, 2);\n//         const genresMarkup = genreNames.join(', ');\n//         if (movie.poster_path!=null) {\n//             src_img = `https://image.tmdb.org/t/p/original/${movie.poster_path}`;\n//         }\n//         else {\n//             src_img = '../image/noImage.jpg';\n//         }\n//       return `\n//         <li class=\"home-film-item\" data-index=\"${currentFilmIndex++}\" data-modal-open>\n//           <img class=\"home-film-image\" src=\"${src_img}\" alt=\"${movie.title}\">\n//           <div class=\"home-film-details\">\n//             <h2 class=\"home-film-title\">${movie.title}</h2>\n//             <p class=\"home-film-info\">\n//               <span class=\"home-film-type\">${genresMarkup}</span> |\n//               <span class=\"home-film-year\">${movie.release_date.slice(0, 4)}</span>\n//               <span class=\"home-film-rating\">${movie.vote_average.toFixed(1)}</span>\n//             </p>\n//           </div>\n//         </li>`;\n//     });\n//     loader.classList.add('visually-hidden');\n//     // Wstawianie wygenerowanego markupu do elementu HTML\n//     filmList.innerHTML = markupArray.join('');\n// };\nlet $350f07e7923c52b5$var$itemsPerPage = 20;\nconst $350f07e7923c52b5$export$8134c072fddab6a5 = async (currPage = 1, pageCallback)=>{\n    try {\n        const response = await (0, $hGVxz.default).get(`https://api.themoviedb.org/3/movie/popular?api_key=c2f18aa0c4ee94c87f87834077fd721a&language=en-EN&per_page=${$350f07e7923c52b5$var$itemsPerPage}&page=${currPage}`);\n        (0, $5ee1102b07bd66cf$export$d4aff629fc562466)(response);\n        const data = response.data;\n        currPage = data.page;\n        totalPages = data.total_pages;\n        pageCallback(currPage, totalPages);\n    // let currentFilmIndex = 0;\n    // const movies = response.data.results;\n    // console.log(movies);\n    // loader.classList.remove('visually-hidden');\n    // // Pobieranie gatunków filmowych\n    // const genresResponse = await axios.get(\n    //   `https://api.themoviedb.org/3/genre/movie/list?api_key=c2f18aa0c4ee94c87f87834077fd721a&language=en-EN`,\n    // );\n    // const genresMap = {};\n    // genresResponse.data.genres.forEach(genre => {\n    //   genresMap[genre.id] = genre.name;\n    // });\n    // // Tworzenie markupu dla każdego filmu\n    // const markupArray = movies.map(movie => {\n    //   const genreNames = movie.genre_ids.map(genreId => genresMap[genreId]).slice(0, 2);\n    //   const genresMarkup = genreNames.join(', ');\n    //   return `\n    //     <li class=\"home-film-item\" data-index=\"${currentFilmIndex++}\" data-modal-open>\n    //       <img class=\"home-film-image\" src=\"https://image.tmdb.org/t/p/original/${\n    //         movie.poster_path\n    //       }\" alt=\"${movie.title}\">\n    //       <div class=\"home-film-details\">\n    //         <h2 class=\"home-film-title\">${movie.title}</h2>\n    //         <p class=\"home-film-info\">\n    //           <span class=\"home-film-type\">${genresMarkup}</span> |\n    //           <span class=\"home-film-year\">${movie.release_date.slice(0, 4)}</span>\n    //           <span class=\"home-film-rating\">${movie.vote_average.toFixed(1)}</span>\n    //         </p>\n    //       </div>\n    //     </li>`;\n    // });\n    // loader.classList.add('visually-hidden');\n    // // Wstawianie wygenerowanego markupu do elementu HTML\n    // filmList.innerHTML = markupArray.join('');\n    } catch (error) {\n        console.error(\"Error fetching data:\", error);\n    }\n};\n// Wywołanie funkcji fetchData, aby pobrać dane i wygenerować markup filmów\n$350f07e7923c52b5$export$8134c072fddab6a5();\n\n\nconst $baa48fd5a30d32e8$var$prev = document.getElementById(\"prev\");\nconst $baa48fd5a30d32e8$var$next = document.getElementById(\"next\");\nconst $baa48fd5a30d32e8$var$pagination = document.getElementById(\"pagination\");\nlet $baa48fd5a30d32e8$var$currPage = 1;\nlet $baa48fd5a30d32e8$var$totalPages = 500;\n// Funkcja tworząca przyciski paginacji\nfunction $baa48fd5a30d32e8$var$createPaginationButtons(currPage) {\n    $baa48fd5a30d32e8$var$pagination.innerHTML = \"\";\n    const buttons = document.createDocumentFragment();\n    // Przycisk dla pierwszej strony\n    const firstPageButton = createButton(\"1\", 1);\n    if (currPage === 1) firstPageButton.classList.add(\"active\");\n    buttons.appendChild(firstPageButton);\n    // Dodaj trzy kropki po pierwszej stronie, jeśli więcej niż 3 strony\n    if ($baa48fd5a30d32e8$var$totalPages > 3) {\n        if (currPage > 2) {\n            const dotsAfterFirstPage = document.createElement(\"span\");\n            dotsAfterFirstPage.textContent = \"...\";\n            buttons.appendChild(dotsAfterFirstPage);\n        }\n        // Wygeneruj przyciski dla poszczególnych stron - max 5\n        for(let i = Math.max(2, currPage - 2); i <= Math.min(currPage + 2, $baa48fd5a30d32e8$var$totalPages - 1); i++){\n            const pageButton = createButton(i.toString(), i);\n            if (i === currPage) pageButton.classList.add(\"active\");\n            buttons.appendChild(pageButton);\n        }\n        // Dodaj trzy kropki, jeśli nie jesteśmy na pierwszej stronie\n        if (currPage >= 1) {\n            const dots = document.createElement(\"span\");\n            dots.textContent = \"...\";\n            buttons.appendChild(dots);\n        } else for(let i = 2; i <= $baa48fd5a30d32e8$var$totalPages - 1; i++){\n            const pageButton = createButton(i.toString(), i);\n            if (i === currPage) pageButton.classList.add(\"active\");\n            buttons.appendChild(pageButton);\n        }\n        // Przycisk dla ostatniej strony\n        const lastPageButton = createButton($baa48fd5a30d32e8$var$totalPages.toString(), $baa48fd5a30d32e8$var$totalPages);\n        if (currPage === $baa48fd5a30d32e8$var$totalPages) lastPageButton.classList.add(\"active\");\n        buttons.appendChild(lastPageButton);\n        $baa48fd5a30d32e8$var$pagination.appendChild(buttons);\n    }\n    // Funkcja pomocnicza do tworzenia przycisków\n    function createButton(text, page) {\n        const button = document.createElement(\"button\");\n        button.textContent = text;\n        button.addEventListener(\"click\", ()=>{\n            $baa48fd5a30d32e8$var$pageCall(page);\n            window.scrollTo(0, 0);\n        });\n        return button;\n    }\n    //Usun disabled do prev, jesli aktualna strona nie jest pierwsza\n    if (currPage > 1) $baa48fd5a30d32e8$var$prev.classList.remove(\"disabled\");\n    else $baa48fd5a30d32e8$var$prev.classList.add(\"disabled\");\n    //Dodaj disabled do next, jesli aktualna strona jest ostatnia\n    if (currPage === $baa48fd5a30d32e8$var$totalPages) $baa48fd5a30d32e8$var$next.classList.add(\"disabled\");\n    else $baa48fd5a30d32e8$var$next.classList.remove(\"disabled\");\n}\n// Listenery na next i prev buttons\n$baa48fd5a30d32e8$var$next.addEventListener(\"click\", ()=>{\n    if ($baa48fd5a30d32e8$var$currPage < $baa48fd5a30d32e8$var$totalPages) {\n        $baa48fd5a30d32e8$var$pageCall($baa48fd5a30d32e8$var$currPage + 1);\n        window.scrollTo(0, 0);\n    }\n});\n$baa48fd5a30d32e8$var$prev.addEventListener(\"click\", ()=>{\n    if ($baa48fd5a30d32e8$var$currPage > 1) {\n        $baa48fd5a30d32e8$var$pageCall($baa48fd5a30d32e8$var$currPage - 1);\n        window.scrollTo(0, 0);\n    }\n});\n// Funkcja wywołująca pobieranie danych dla wybranej strony\nasync function $baa48fd5a30d32e8$var$pageCall(page) {\n    $baa48fd5a30d32e8$var$currPage = page;\n    (0, $350f07e7923c52b5$export$8134c072fddab6a5)(page, $baa48fd5a30d32e8$var$pageCallback);\n}\n// Funkcja wywoływana po pobraniu danych, aktualizująca paginację\nfunction $baa48fd5a30d32e8$var$pageCallback(page) {\n    $baa48fd5a30d32e8$var$createPaginationButtons(page);\n}\n// Wywołaj funkcję createPaginationButtons dla pierwszej strony po załadowaniu strony\n$baa48fd5a30d32e8$var$createPaginationButtons(1);\n\n\n\nparcelRequire(\"7UJs8\");\nparcelRequire(\"hHD3f\");\nconst $2b17edf3abe45593$var$toTop = document.querySelector(\".to-top\");\nwindow.addEventListener(\"scroll\", ()=>{\n    const modal = document.querySelector(\"[data-modal]:not(.film-details-is-hidden)\");\n    if (modal) {\n        $2b17edf3abe45593$var$toTop.classList.remove(\"active\");\n        return;\n    }\n    if (window.scrollY > 215) $2b17edf3abe45593$var$toTop.classList.add(\"active\");\n    else $2b17edf3abe45593$var$toTop.classList.remove(\"active\");\n});\n// Nasłuchiwanie kliknięcia otwierającego okno modalne\ndocument.body.addEventListener(\"click\", (event)=>{\n    if (event.target.closest(\"[data-modal-open]\")) $2b17edf3abe45593$var$toTop.classList.remove(\"active\"); //\n});\n// Nasłuchiwanie zdarzenia zamknięcia okna modalnego\ndocument.addEventListener(\"click\", (event)=>{\n    const modalCloseButton = event.target.closest(\".film-details-close\");\n    const modal = document.querySelector(\"[data-modal]\");\n    if (modalCloseButton || event.target === modal) {\n        if (window.scrollY > 215) $2b17edf3abe45593$var$toTop.classList.add(\"active\");\n    }\n});\n\n\nparcelRequire(\"cB4zx\");\n\nparcelRequire(\"2AKVI\");\nparcelRequire(\"46SdE\");\n\n\n//# sourceMappingURL=index.cd33089c.js.map\n","import './css/main.css';\n\nimport './js/fetchFilms.js';\nimport './js/logWindow.js';\nimport './js/mobileMenu.js';\nimport './js/modal.js';\nimport './js/modalButtons.js';\nimport './js/pagination.js';\nimport './js/popularFilms.js';\nimport './js/modal-team.js';\nimport './js/darkMode.js';\nimport './js/to-top.js';\nimport './js/buttonEffects.js';\nimport './js/showFilms.js';\n\nimport { initializeApp } from 'firebase/app';\nimport { getAuth } from 'firebase/auth';\n","\n// axios\nimport axios from 'axios';\nimport Notiflix from 'notiflix';\n\nimport { showFilms } from \"./showFilms\";\n\n\nconst searchForm = document.querySelector('#search-form');\nconst errorText = document.querySelector('.errorText');\n\n\n// export async function getGenres() {\n//     return axios.get(\n//       `https://api.themoviedb.org/3/genre/movie/list?api_key=c2f18aa0c4ee94c87f87834077fd721a&language=en-EN`,\n//     );\n// } \n\n\n// export async function showFilms(res) { \n//     const loader = document.querySelector('.loader-container');\n//     const filmList = document.querySelector('.home-film-list');\n//   let currentFilmIndex = 0;\n//   const movies = res.data.results;\n//   loader.classList.remove('visually-hidden');\n//   // Pobieranie gatunków filmowych\n// let src_img \n//   const genresResponse = await getGenres();\n//     const genresMap = {};\n//     genresResponse.data.genres.forEach(genre => {\n//       genresMap[genre.id] = genre.name;\n//     });\n//     // Tworzenie markupu dla każdego filmu\n//     const markupArray = movies.map(movie => {\n//       const genreNames = movie.genre_ids.map(genreId => genresMap[genreId]).slice(0, 2);\n//         const genresMarkup = genreNames.join(', ');\n//         if (movie.poster_path!=null) {\n//             src_img = `https://image.tmdb.org/t/p/original/${movie.poster_path}`;\n//         }\n//         else {\n//             src_img = '../image/noImage.jpg';\n//         }\n//       return `\n//         <li class=\"home-film-item\" data-index=\"${currentFilmIndex++}\" data-modal-open>\n//           <img class=\"home-film-image\" src=\"${src_img}\" alt=\"${movie.title}\">\n//           <div class=\"home-film-details\">\n//             <h2 class=\"home-film-title\">${movie.title}</h2>\n//             <p class=\"home-film-info\">\n//               <span class=\"home-film-type\">${genresMarkup}</span> |\n//               <span class=\"home-film-year\">${movie.release_date.slice(0, 4)}</span>\n//               <span class=\"home-film-rating\">${movie.vote_average.toFixed(1)}</span>\n//             </p>\n//           </div>\n//         </li>`;\n//     });\n//     loader.classList.add('visually-hidden');\n//     // Wstawianie wygenerowanego markupu do elementu HTML      \n//     filmList.innerHTML = markupArray.join('');\n\n\n\n// }; \n\n\n// query\nexport async function fetchFilmsByQuery(qwery, page) {\nconst options = {\n  method: 'GET',\n  url: 'https://api.themoviedb.org/3/search/movie',\n  params: {\n    query: `${qwery}`,\n    include_adult: 'false',\n    language: 'en-US',\n    page: `${page}`\n  },\n  headers: {\n    accept: 'application/json',\n    Authorization: 'Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwNjRiYzVmYTA0ZTcwZWUwNmI1YmZjZmZkZDAwMjhmZiIsInN1YiI6IjY1ZjFiYzIwZDY0YWMyMDBjYTVkMWU2YSIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.kSA66Srxuh9huCM-91QWv-1PAFYBxqjt-fFzzJb4bmg'\n  }\n};\n  \n  \n\n  const res = await axios.request(options);\n  return res;\n\n}\n\nsearchForm.addEventListener(\"submit\", (evt) => {\n  evt.preventDefault();\n  if(searchForm.elements.searchQuery.value.trim()==\"\"){\n      Notiflix.Notify.warning('Enter some text...');\n\n  }else{\n\n  fetchFilmsByQuery(searchForm.elements.searchQuery.value.trim().split(\" \").join(`%20`),1)\n    .then((res) => {\n      if (res.data.total_results == 0) {\n        errorText.classList.remove(\"hiddenVisibility\");\n      }\n      else {\n        errorText.classList.add(\"hiddenVisibility\");\n        Notiflix.Notify.success(`Znaeziono: ${res.data.total_results}` )\n        showFilms(res);\n      }\n      \n    })\n    .catch((error) => {\n      \n      });\n  }\n});\n\n\n\n\n","\nimport axios from 'axios';\n\n// import { showFilms } from \"./showFilms\";\n\nasync function getGenres() {\n    return axios.get(\n      `https://api.themoviedb.org/3/genre/movie/list?api_key=c2f18aa0c4ee94c87f87834077fd721a&language=en-EN`,\n    );\n} \n\n\nexport async function showFilms(res) { \n    const loader = document.querySelector('.loader-container');\n    const filmList = document.querySelector('.home-film-list');\n  let currentFilmIndex = 0;\n  const movies = res.data.results;\n  loader.classList.remove('visually-hidden');\n  // Pobieranie gatunków filmowych\nlet src_img \n  const genresResponse = await getGenres();\n    const genresMap = {};\n    genresResponse.data.genres.forEach(genre => {\n      genresMap[genre.id] = genre.name;\n    });\n    // Tworzenie markupu dla każdego filmu\n    const markupArray = movies.map(movie => {\n      const genreNames = movie.genre_ids.map(genreId => genresMap[genreId]).slice(0, 2);\n        const genresMarkup = genreNames.join(', ');\n        if (movie.poster_path!=null) {\n            src_img = `https://image.tmdb.org/t/p/original/${movie.poster_path}`;\n        }\n        else {\n            src_img = '../image/noImage.jpg';\n        }\n      return `\n        <li class=\"home-film-item\" data-index=\"${currentFilmIndex++}\" data-modal-open>\n          <img class=\"home-film-image\" src=\"${src_img}\" alt=\"${movie.title}\">\n          <div class=\"home-film-details\">\n            <h2 class=\"home-film-title\">${movie.title}</h2>\n            <p class=\"home-film-info\">\n              <span class=\"home-film-type\">${genresMarkup}</span> |\n              <span class=\"home-film-year\">${movie.release_date.slice(0, 4)}</span>\n              <span class=\"home-film-rating\">${movie.vote_average.toFixed(1)}</span>\n            </p>\n          </div>\n        </li>`;\n    });\n    loader.classList.add('visually-hidden');\n    // Wstawianie wygenerowanego markupu do elementu HTML      \n    filmList.innerHTML = markupArray.join('');\n\n\n\n}; ","import { fetchData } from './popularFilms';\n\nconst prev = document.getElementById('prev');\nconst next = document.getElementById('next');\nconst pagination = document.getElementById('pagination');\n\nlet currPage = 1;\nlet totalPages = 500;\n\n// Funkcja tworząca przyciski paginacji\nfunction createPaginationButtons(currPage) {\n  pagination.innerHTML = '';\n\n  const buttons = document.createDocumentFragment();\n\n  // Przycisk dla pierwszej strony\n  const firstPageButton = createButton('1', 1);\n  if (currPage === 1) {\n    firstPageButton.classList.add('active');\n  }\n  buttons.appendChild(firstPageButton);\n\n  // Dodaj trzy kropki po pierwszej stronie, jeśli więcej niż 3 strony\n  if (totalPages > 3) {\n    if (currPage > 2) {\n      const dotsAfterFirstPage = document.createElement('span');\n      dotsAfterFirstPage.textContent = '...';\n      buttons.appendChild(dotsAfterFirstPage);\n    }\n\n    // Wygeneruj przyciski dla poszczególnych stron - max 5\n    for (let i = Math.max(2, currPage - 2); i <= Math.min(currPage + 2, totalPages - 1); i++) {\n      const pageButton = createButton(i.toString(), i);\n      if (i === currPage) {\n        pageButton.classList.add('active');\n      }\n      buttons.appendChild(pageButton);\n    }\n\n    // Dodaj trzy kropki, jeśli nie jesteśmy na pierwszej stronie\n    if (currPage >= 1) {\n      const dots = document.createElement('span');\n      dots.textContent = '...';\n      buttons.appendChild(dots);\n    } else {\n      for (let i = 2; i <= totalPages - 1; i++) {\n        const pageButton = createButton(i.toString(), i);\n        if (i === currPage) {\n          pageButton.classList.add('active');\n        }\n        buttons.appendChild(pageButton);\n      }\n    }\n\n    // Przycisk dla ostatniej strony\n    const lastPageButton = createButton(totalPages.toString(), totalPages);\n    if (currPage === totalPages) {\n      lastPageButton.classList.add('active');\n    }\n    buttons.appendChild(lastPageButton);\n\n    pagination.appendChild(buttons);\n  }\n\n  // Funkcja pomocnicza do tworzenia przycisków\n  function createButton(text, page) {\n    const button = document.createElement('button');\n    button.textContent = text;\n    button.addEventListener('click', () => {\n      pageCall(page);\n      window.scrollTo(0, 0);\n    });\n    return button;\n  }\n\n  //Usun disabled do prev, jesli aktualna strona nie jest pierwsza\n  if (currPage > 1) {\n    prev.classList.remove('disabled');\n  } else {\n    prev.classList.add('disabled');\n  }\n\n  //Dodaj disabled do next, jesli aktualna strona jest ostatnia\n  if (currPage === totalPages) {\n    next.classList.add('disabled');\n  } else {\n    next.classList.remove('disabled');\n  }\n}\n// Listenery na next i prev buttons\nnext.addEventListener('click', () => {\n  if (currPage < totalPages) {\n    pageCall(currPage + 1);\n    window.scrollTo(0, 0);\n  }\n});\n\nprev.addEventListener('click', () => {\n  if (currPage > 1) {\n    pageCall(currPage - 1);\n    window.scrollTo(0, 0);\n  }\n});\n\n// Funkcja wywołująca pobieranie danych dla wybranej strony\nasync function pageCall(page) {\n  currPage = page;\n  fetchData(page, pageCallback);\n}\n\n// Funkcja wywoływana po pobraniu danych, aktualizująca paginację\nfunction pageCallback(page) {\n  createPaginationButtons(page);\n}\n\n// Wywołaj funkcję createPaginationButtons dla pierwszej strony po załadowaniu strony\ncreatePaginationButtons(1);\n","import axios from 'axios';\nimport { showFilms } from './showFilms';\n\n// const axios = require(\"axios\");\n\nconst filmList = document.querySelector('.home-film-list');\nconst loader = document.querySelector('.loader-container');\n\n// export async function getGenres() {\n//     return axios.get(\n//       `https://api.themoviedb.org/3/genre/movie/list?api_key=c2f18aa0c4ee94c87f87834077fd721a&language=en-EN`,\n//     );\n// }\n\n// export async function showFilms(res) {\n//     const loader = document.querySelector('.loader-container');\n//     const filmList = document.querySelector('.home-film-list');\n//   let currentFilmIndex = 0;\n//   const movies = res.data.results;\n//   loader.classList.remove('visually-hidden');\n//   // Pobieranie gatunków filmowych\n// let src_img\n//   const genresResponse = await getGenres();\n//     const genresMap = {};\n//     genresResponse.data.genres.forEach(genre => {\n//       genresMap[genre.id] = genre.name;\n//     });\n//     // Tworzenie markupu dla każdego filmu\n//     const markupArray = movies.map(movie => {\n//       const genreNames = movie.genre_ids.map(genreId => genresMap[genreId]).slice(0, 2);\n//         const genresMarkup = genreNames.join(', ');\n//         if (movie.poster_path!=null) {\n//             src_img = `https://image.tmdb.org/t/p/original/${movie.poster_path}`;\n//         }\n//         else {\n//             src_img = '../image/noImage.jpg';\n//         }\n//       return `\n//         <li class=\"home-film-item\" data-index=\"${currentFilmIndex++}\" data-modal-open>\n//           <img class=\"home-film-image\" src=\"${src_img}\" alt=\"${movie.title}\">\n//           <div class=\"home-film-details\">\n//             <h2 class=\"home-film-title\">${movie.title}</h2>\n//             <p class=\"home-film-info\">\n//               <span class=\"home-film-type\">${genresMarkup}</span> |\n//               <span class=\"home-film-year\">${movie.release_date.slice(0, 4)}</span>\n//               <span class=\"home-film-rating\">${movie.vote_average.toFixed(1)}</span>\n//             </p>\n//           </div>\n//         </li>`;\n//     });\n//     loader.classList.add('visually-hidden');\n//     // Wstawianie wygenerowanego markupu do elementu HTML\n//     filmList.innerHTML = markupArray.join('');\n\n// };\n\nlet itemsPerPage = 20;\n\nexport const fetchData = async (currPage = 1, pageCallback) => {\n  try {\n    const response = await axios.get(\n      `https://api.themoviedb.org/3/movie/popular?api_key=c2f18aa0c4ee94c87f87834077fd721a&language=en-EN&per_page=${itemsPerPage}&page=${currPage}`,\n    );\n    showFilms(response);\n    const data = response.data;\n    currPage = data.page;\n    totalPages = data.total_pages;\n    pageCallback(currPage, totalPages);\n\n    // let currentFilmIndex = 0;\n    // const movies = response.data.results;\n    // console.log(movies);\n    // loader.classList.remove('visually-hidden');\n    // // Pobieranie gatunków filmowych\n    // const genresResponse = await axios.get(\n    //   `https://api.themoviedb.org/3/genre/movie/list?api_key=c2f18aa0c4ee94c87f87834077fd721a&language=en-EN`,\n    // );\n    // const genresMap = {};\n    // genresResponse.data.genres.forEach(genre => {\n    //   genresMap[genre.id] = genre.name;\n    // });\n\n    // // Tworzenie markupu dla każdego filmu\n    // const markupArray = movies.map(movie => {\n    //   const genreNames = movie.genre_ids.map(genreId => genresMap[genreId]).slice(0, 2);\n    //   const genresMarkup = genreNames.join(', ');\n    //   return `\n    //     <li class=\"home-film-item\" data-index=\"${currentFilmIndex++}\" data-modal-open>\n    //       <img class=\"home-film-image\" src=\"https://image.tmdb.org/t/p/original/${\n    //         movie.poster_path\n    //       }\" alt=\"${movie.title}\">\n    //       <div class=\"home-film-details\">\n    //         <h2 class=\"home-film-title\">${movie.title}</h2>\n    //         <p class=\"home-film-info\">\n    //           <span class=\"home-film-type\">${genresMarkup}</span> |\n    //           <span class=\"home-film-year\">${movie.release_date.slice(0, 4)}</span>\n    //           <span class=\"home-film-rating\">${movie.vote_average.toFixed(1)}</span>\n    //         </p>\n    //       </div>\n    //     </li>`;\n    // });\n    // loader.classList.add('visually-hidden');\n    // // Wstawianie wygenerowanego markupu do elementu HTML\n    // filmList.innerHTML = markupArray.join('');\n  } catch (error) {\n    console.error('Error fetching data:', error);\n  }\n};\n\n// Wywołanie funkcji fetchData, aby pobrać dane i wygenerować markup filmów\nfetchData();\n","const toTop = document.querySelector('.to-top');\n\nwindow.addEventListener('scroll', () => {\n  const modal = document.querySelector('[data-modal]:not(.film-details-is-hidden)');\n\n  if (modal) {\n    toTop.classList.remove('active');\n    return;\n  }\n\n  if (window.scrollY > 215) {\n    toTop.classList.add('active');\n  } else {\n    toTop.classList.remove('active'); \n  }\n});\n\n// Nasłuchiwanie kliknięcia otwierającego okno modalne\ndocument.body.addEventListener('click', (event) => {\n  if (event.target.closest('[data-modal-open]')) {\n    toTop.classList.remove('active'); //\n  }\n});\n\n// Nasłuchiwanie zdarzenia zamknięcia okna modalnego\ndocument.addEventListener('click', (event) => {\n  const modalCloseButton = event.target.closest('.film-details-close');\n  const modal = document.querySelector('[data-modal]');\n  \n  if (modalCloseButton || event.target === modal) {\n    if (window.scrollY > 215) {\n      toTop.classList.add('active');\n    }\n  }\n});\n"],"names":["$parcel$interopDefault","a","__esModule","default","$parcel$global","globalThis","$parcel$modules","$parcel$inits","parcelRequire","id","exports","init","module","call","err","Error","code","register","$hGVxz","$lzX4I","$5ee1102b07bd66cf$var$getGenres","get","$5ee1102b07bd66cf$export$d4aff629fc562466","res","src_img","loader","document","querySelector","filmList","currentFilmIndex","movies","data","results","classList","remove","genresResponse","genresMap","genres","forEach","genre","name","markupArray","map","movie","genresMarkup","genreNames","genre_ids","genreId","slice","join","poster_path","title","release_date","vote_average","toFixed","add","innerHTML","$9a7554dd658d5eed$var$searchForm","$9a7554dd658d5eed$var$errorText","$9a7554dd658d5eed$export$9032d802dd688362","qwery","page","options","method","url","params","query","include_adult","language","headers","accept","Authorization","request","addEventListener","evt","preventDefault","elements","searchQuery","value","trim","Notify","warning","split","then","total_results","success","catch","error","$350f07e7923c52b5$export$8134c072fddab6a5","currPage","pageCallback","response","totalPages","total_pages","console","$baa48fd5a30d32e8$var$prev","getElementById","$baa48fd5a30d32e8$var$next","$baa48fd5a30d32e8$var$pagination","$baa48fd5a30d32e8$var$currPage","$baa48fd5a30d32e8$var$createPaginationButtons","buttons","createDocumentFragment","firstPageButton","createButton","appendChild","dotsAfterFirstPage","createElement","textContent","i","Math","max","min","$baa48fd5a30d32e8$var$totalPages","pageButton","toString","dots","lastPageButton","text","button","$baa48fd5a30d32e8$var$pageCall","window","scrollTo","$baa48fd5a30d32e8$var$pageCallback","$2b17edf3abe45593$var$toTop","scrollY","body","event","target","closest","modalCloseButton","modal"],"version":3,"file":"index.cd33089c.js.map"}